https://tomcat.apache.org
1. 环境配置
   cd /tmp && wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm
   rpm -ivh jdk-8u131-linux-x64.rpm
   环境变量：
    vi + /etc/profile 
    JAVA_HOME=/usr/java/jdk1.8.0_131
    CLASSPATH=.:$JAVA_HOME/lib
    PATH=$JAVA_HOME/bin:$PATH
    export JAVA_HOME CLASSPATH PATH

    source /etc/profile
2. 安装
    # 安装wget
    yum install wget -y
    # 下载tomcat包
    cd /tmp &&wget http://mirrors.shu.edu.cn/apache/tomcat/tomcat-9/v9.0.13/bin/apache-tomcat-9.0.13.tar.gz
    # 解压
    tar -xzvf  apache-tomcat-9.0.13.tar.gz
    # 移动到指定位置并重命名
    mv /tmp/apache-tomcat-9.0.13 /opt/tomcat9
    # 将Tomcat配置到PATH
    export TOMCAT_HOME=/opt/tomcat9
    export PATH=$TOMCAT_HOME/bin:$PATH

    source /etc/profile
    # 将war包放到Tomcat路径下
    注意:放到ROOT路径下需要压缩;放到webapps下不用压缩
           放在webapps下,访问时需要加war包名:http://xxx.xxx.xxx.xxx:8080/war包名
    # 启动 tomcat
    /opt/tomcat9/bin/startup.sh 
    或者
    /opt/tomcat9/bin/catalina.sh start

3. 配置编码server.xml(URIEncoding:针对中文URL处理;useBodyEncodingForURI:针对QueryString使用BodyEncoding解码)
   useBodyEncodingForURI="true" URIEncoding="UTF-8"

4. 更改防火墙规则,不对外开放8080端口.
   firewall-cmd  --remove-port=8080/tcp --permanent
   firewall-cmd  --reload

5. 使用/dev/urandom生成随机数
修改catalina.sh文件:在后面添加-Djava.security.egd=file:/dev/./urandom
JAVA_OPTS="$JAVA_OPTS -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Djava.security.egd=file:/dev/./urandom"

6.安装Apache Portable Runtime(APR)
http://tomcat.apache.org/tomcat-8.5-doc/apr.html
yum安装:
sudo yum install -y apr-devel
源码安装:
https://apr.apache.org/compiling_unix.html

7.解决linux下./shutdown.sh命令不能杀死Tomcat进程的问题
a. 修改bin/catalina.sh文件
    在PRGDIR=`dirname "$PRG"`这一行的下方添加如下内容:
    if [ -z "$CATALINA_PID" ]; then
        CATALINA_PID=$PRGDIR/CATALINA_PID
    fi
b. 修改bin/shutdown.sh文件
    最后一行修改为如下形式(其实就是增加了-force):
    exec "$PRGDIR"/"$EXECUTABLE" stop -force "$@"

8. Tomcat7以下使用NIO
<Connector port="8080"protocol="org.apache.coyote.http11.Http11NioProtocol" connectionTimeout="30000" redirectPort="8443"/>
protocol：Tomcat 8 设置 nio2 更好：org.apache.coyote.http11.Http11Nio2Protocol
protocol：Tomcat 6 设置 nio 更好：org.apache.coyote.http11.Http11NioProtocol
protocol：Tomcat 8 设置 APR 性能飞快：org.apache.coyote.http11.Http11AprProtocol
安装APR:
yum -y install apr apr-devel openssl-devel
tar zxvf tomcat-native.tar.gz
安装APR之后去Tomcat官网下载native组件1.2.10:
http://tomcat.apache.org/download-native.cgi
tar -xvzf tomcat-native-1.2.10-src.tar.gz
cd tomcat-native-1.2.10-src/native/
./configure --with-apr=/usr/bin/apr-1-config --with-ssl=/usr/include/openssl/
make && make install
安装完成之后 会出现如下提示信息:
Libraries have been installed in:
/usr/local/apr/lib
安装成功后还需要对tomcat设置环境变量，方法是在catalina.sh文件中增加1行:
在这段代码下面添加:
============
# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
==============
CATALINA_OPTS=”-Djava.library.path=/usr/local/apr/lib”

修改server.xml的配置，如下所示:
protocol=”org.apache.coyote.http11.Http11AprProtocol”

启动tomcat之后，查看日志，如下所示:
INFO: Initializing ProtocolHandler [“http-apr-8080”]
2020-04-17 22:34:58 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [“ajp-apr-8009”]

9.开启线程池(Tomcat优化)
取消注释:
<Executor name="tomcatThreadPool" --线程池名
     namePrefix="catalina-exec-"
     maxThreads="500"
     minSpareThreads="30"
     maxIdleTime="60000"
     prestartminSpareThreads = "true"
     maxQueueSize = "100"/>
maxThreads：最大并发数，默认设置 200，一般建议在 500 ~ 800，根据硬件设施和业务来判断
minSpareThreads：Tomcat 初始化时创建的线程数，默认设置 25
maxIdleTime：如果当前线程大于初始化线程，那空闲线程存活的时间，单位毫秒，默认60000=60秒=1分钟。
prestartminSpareThreads：在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了
maxQueueSize：最大的等待队列数，超过则拒绝请求

<Connector executor="tomcatThreadPool"
     port="8080"
     protocol="org.apache.coyote.http11.Http11AprProtocol"
     connectionTimeout="30000"
     maxConnections="10000"
     redirectPort="8443"
     enableLookups="false"
     acceptCount="300"
     maxPostSize="10485760"
     maxHttpHeaderSize="8192"
     compression="on"
     disableUploadTimeout="false"
     connectionUploadTimeout="150000"
     compressionMinSize="2048"
     acceptorThreadCount="2"
     keepAliveTimeout="120000"
     compressableMimeType="text/html,text/plain,text/css,application/javascript,application/json,application/x-font-ttf,application/x-font-otf,image/svg+xml,image/jpeg,image/png,image/gif,audio/mpeg,video/mp4"
     URIEncoding="utf-8"
     processorCache="20000"
     tcpNoDelay="true"
     connectionLinger="5"
     server="Server Version 11.0"
     maxKeepAliveRequests="1"
     compression="on"
     compressionMinSize="2048"/>
connectionTimeout：Connector接受一个连接后等待的时间(milliseconds)，默认值是60000。
maxConnections：这个值表示最多可以有多少个socket连接到tomcat上
enableLookups：禁用DNS查询
acceptCount：当tomcat起动的线程数达到最大时，接受排队的请求个数，默认值为100。
maxPostSize：设置由容器解析的URL参数的最大长度，-1(小于0)为禁用这个属性，默认为2097152(2M) 请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求。
maxHttpHeaderSize：http请求头信息的最大程度，超过此长度的部分不予处理。一般8K。
compression：是否启用GZIP压缩 on为启用（文本数据压缩） off为不启用， force 压缩所有数据
disableUploadTimeout：这个标志允许servlet容器使用一个不同的,通常长在数据上传连接超时。 如果不指定,这个属性被设置为true,表示禁用该时间超时。
compressionMinSize：当超过最小数据大小才进行压缩
acceptorThreadCount：用于接受连接的线程数量。增加这个值在多CPU的机器上,尽管你永远不会真正需要超过2。 也有很多非维持连接,您可能希望增加这个值。默认值是1。
compressableMimeType：配置想压缩的数据类型
URIEncoding：网站一般采用UTF-8作为默认编码。
processorCache：协议处理器缓存的处理器对象来提高性能。 该设置决定多少这些对象的缓存。-1意味着无限的,默认是200。 如果不使用Servlet 3.0异步处理,默认是使用一样的maxThreads设置。 如果使用Servlet 3.0异步处理,默认是使用大maxThreads和预期的并发请求的最大数量(同步和异步)。
tcpNoDelay：如果设置为true,TCP_NO_DELAY选项将被设置在服务器套接字,而在大多数情况下提高性能。这是默认设置为true。
connectionLinger：秒数在这个连接器将持续使用的套接字时关闭。默认值是 -1,禁用socket 延迟时间。
server：隐藏Tomcat版本信息,首先隐藏HTTP头中的版本信息
maxKeepAliveRequests：表示在服务器关闭之前，该连接最大支持的请求数。超过该请求数的连接也将被关闭，1表示禁用，-1表示不限制个数，默认100个，一般设置在100~200之间
compression：是否对响应的数据进行 GZIP 压缩，off：表示禁止压缩；on：表示允许压缩（文本将被压缩）、force：表示所有情况下都进行压缩，默认值为off，压缩数据后可以有效的减少页面的大小，一般可以减小1/3左右，节省带宽
compressionMinSize：表示压缩响应的最小值，只有当响应报文大小大于这个值的时候才会对报文进行压缩，如果开启了压缩功能，默认值就是2048

10.JVM调优
设置启动初始内存:其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置
在TOMCAT_HOME/bin/catalina.sh 增加如下语句:
添加到上面CATALINA_OPTS的后面即可:JAVA_OPTS=-Xms512m -Xmx1024m -XX:PermSize=512M -XX:MaxNewSize=1024m -XX:MaxPermSize=1024m
-Xms:JVM初始化堆内存大小
-Xmx:JVM堆的最大内存
-Xss:线程栈大小
-XX:PermSize:JVM非堆区初始内存分配大小
-XX:MaxPermSize:JVM非堆区最大内存
建议和注意事项:
-Xms和-Xmx选项设置为相同堆内存分配，以避免在每次GC 后调整堆的大小，堆内存建议占内存的60%~80%；非堆内存是不可回收内存，大小视项目而定;线程栈大小推荐256k

在startup脚本中添加配置:
# windows
set JAVA_OPTS=-server -Xms1024m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m
# Linux
JAVA_OPTS="-server -Dfile.encoding=UTF-8 -Xms=512m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m"

以下给出1G内存环境下Java JVM的参数设置参考:
JAVA_OPTS="-server -Xms800m -Xmx800m  -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m -Djava.awt.headless=true "
JAVA_OPTS="-server -Xms768m -Xmx768m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:NewSize=192m -XX:MaxNewSize=384m"
CATALINA_OPTS="-server -Xms768m -Xmx768m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:NewSize=192m -XX:MaxNewSize=384m"

32G内存配置如下:JAVA_OPTS=-Xms20480m -Xmx20480m -Xss1024K -XX:PermSize=512m -XX:MaxPermSize=2048m
关闭DNS反向查询:在<Connector port=”8080″ 中加入如下参数:enableLookups=”false”
优化tomcat参数:<Connector port=”8080″
			protocol=”org.apache.coyote.http11.Http11AprProtocol”
			connectionTimeout=”20000″ //链接超时时长
			redirectPort=”8443″
			maxThreads=”500″//设定处理客户请求的线程的最大数目，决定了服务器可以同时响应客户请求的数,默认200
			minSpareThreads=”20″//初始化线程数，最小空闲线程数，默认为10
			acceptCount=”1000″ //当所有可以使用的处理请求的线程数都被使用时，可以被放到处理队列中请求数，请求数超过这个数的请求将不予处理，默认100
			enableLookups=”false”
			URIEncoding=”UTF-8″ />

1.手动设置Heap size
修改TOMCAT_HOME/bin/catalina.bat,在“echo "Using CATALINA_BASE: $CATALINA_BASE"”上面加入以下代码:
set JAVA_OPTS=%JAVA_OPTS% -server -Xms800m -Xmx800m -XX:MaxNewSize=256m  
set JAVA_OPTS=%JAVA_OPTS% -server -Xms800m -Xmx800m -XX:MaxNewSize=256m
或修改catalina.sh,在“echo "Using CATALINA_BASE: $CATALINA_BASE"”上面加入以下行:
JAVA_OPTS="$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m"
2.java.lang.OutOfMemoryError: PermGen space
手动设置MaxPermSize大小
修改TOMCAT_HOME/bin/catalina.bat（Linux下为catalina.sh），在代码“echo "Using CATALINA_BASE: $CATALINA_BASE"”上面加入以下行：
set JAVA_OPTS=%JAVA_OPTS% -server -XX:PermSize=128M -XX:MaxPermSize=512m
catalina.sh文件的修改如下:
JAVA_OPTS="$JAVA_OPTS -server -XX:PermSize=128M -XX:MaxPermSize=512m"
3.java.lang.OutOfMemoryError: PermGen space
在catalina.bat的第一行增加:
set JAVA_OPTS=-Xms64m -Xmx256m -XX:PermSize=128M -XX:MaxNewSize=256m -XX:MaxPermSize=256m
在catalina.sh的第一行增加:
JAVA_OPTS= -Xms64m -Xmx256m -XX:PermSize=128M -XX:MaxNewSize=256m -XX:MaxPermSize=256m

####################### Https #######################
1. 生成Tomcat服务器的数字证书
jdk的bin目录下有一个keytool.ext程序就是java提供的制作数字证书的工具,使用keytool生成一个名字为tomcat的数字证书,存放在.keystore这个秘钥中
keytool -genkey -alias tomcat -keyalg RSA
NOTE:密钥口令:111111
          您的姓名与姓氏是什么? -> 输入网站域名:barkleychang.com
生成的文件路径:C:\Users\chang\.keystore
查看.keystore 秘钥库里面的所有证书:keytool -list -keystore C:\Users\chang\.keystore
2. 将生成的.keystore密钥库文件拷贝到Tomcat服务器的conf目录下,修改server.xml文件配置http连接器
<Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
                      maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
                      clientAuth="false" sslProtocol="TLS" 
                      keystoreFile="conf/.keystore" keystorePass="111111"/>
3. 将数字证书安装到浏览器中,以IE8浏览器为例进行证书安装说明,安装步骤如下:
安全 -> 安全报告 -> 查看证书 -> 安装证书 -> 将所有的证书放入下列存储 -> 受信任的根证书颁发机构
####################### Https #######################

####################### 问题 #######################
1.Tomcat启动卡住问题
重启tomcat会被卡住，他会一直卡在(通过./catalina.sh run方法可以查看输出到标准输出流的日志)
INFO:Deploying web application directory /home/tutor/apache-tomcat-7.0.73/webapps/manager .....
解决方法1:
将$JAVA_HOME/jre/lib/security/Java.security内,将securerandom.source的内容改为file:/dev/./urandom
解决方法2:
将catalina.sh文件修改:JAVA_OPTS="$JAVA_OPTS -Djava.protocol.handler.pkgs=org.apache.catalina.webresources"下新增
JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"
或者:
if [[ "$JAVA_OPTS" != *-Djava.security.egd=* ]]; then
    JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"
fi
####################### 问题 #######################