# POM -> Project Object Model项目对象模型

# 添加环境变量
  MAVEN_HOME(M2_HOME):  D:\Program\Green\64\apache-maven-3.5.2
  Path:                 %MAVEN_HOME%\bin
  
# 本地仓库默认位置
  C:\Users\chang\.m2\repository

# 修改默认本地仓库位置
  D:\Program\Green\64\apache-maven-3.5.2\conf\settings.xml
  <localRepository>D:\MavenRepository</localRepository>

# 修改默认中央仓库地址
<mirrors>
    <mirror>
        <id>mirror-aliyun-releases</id>
        <mirrorOf>*</mirrorOf>
        <name>阿里云maven镜像</name>
        <url>https://maven.aliyun.com/repository/public</url>
    </mirror>
</mirrors>
<!--setting.xml中添加如下配置-->
<mirror>
    <id>aliyun</id>  
    <!-- 中心仓库的 mirror(镜像) -->
    <mirrorOf>central</mirrorOf>
    <name>Nexus aliyun</name>
    <!-- aliyun仓库地址 以后所有要指向中心仓库的请求,都会指向aliyun仓库 -->
    <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>

# 设置MAVEN_OPTS环境变量
-Xms512m -Xmx1024m

# Maven坐标
  groupid:      公司或组织域名倒叙+项目名(com.atguigu.mavenproject)
  artifactid:   模块名称(HelloWorld)
  verrsion:     版本(1.0.0)

# Maven生命周期
  1.Clean Lifecycle: 在进行真正的构建之前进行一些清理工作
    pre-clean: 执行一些清理前需要完成的工作
    clean:     清理上一次构建生成的文件
    post-clean:执行一些清理后需要完成的工作
  2.Default Lifecycle: 构建的核心部分，编译，测试，打包，部署等等
    validate            验证项目是正确的，所有必要的信息都是可用的
    initialize          初始化构建状态，例如设置属性或创建目录
    generate-sources    生成包含在编译中的任何源代码
    process-sources     处理项目主资源文件,一般来说是对src/main/resources目录的内容进行变量替换等工作后复制到项目输出的主classpath目录中
    generate-resources  生成包含在包中的资源
    process-resources   将资源复制并处理到目标目录中，准备打包
    compile             编译项目的源代码,一般来说是编译/src/main/java目录下的Java文件至项目输出的主classpath目录中
    process-classes     从编译后生成生成的文件，例如在Java类上执行字节码增强。
    generate-test-sources   生成包含在编译中的任何测试源代码
    process-test-sources    处理项目测试资源文件,一般来说是对src/test/resources目录的内容进行变量替换等工作后复制到项目输出的测试classpath目录中
    generate-test-resources 为测试创建资源。
    process-test-resources  将资源复制并处理到测试目标目录中
    test-compile            编译项目的测试代码,一般来说是编译src/test/java目录下的Java文件至项目输出的测试classpath目录中
    process-test-classes    从测试编译后post-process生成文件，例如在Java类上执行字节码增强。对于Maven 2.0.5和以上
    test             使用单元测试框架运行测试,测试代码不会被打包或部署
    prepare-package 在实际包装前执行必要的准备工作。这通常会导致包的一个未打包的、经过处理的版本。(Maven 2.1及以上)
    package          接受编译好的代码,打包成可发布的格式,如JAR
    pre-integration-test  执行集成测试之前需要执行的操作。这可能涉及到设置所需的环境等问题。
    integration-test  在需要集成测试的环境中，处理并部署包。
    post-integration-test 执行集成测试后所需要的操作。这可能包括清理环境。
    verify                运行任何检查以验证包是否有效，并满足质量标准。
    install               将包安装到Maven本地仓库,供本地其他Maven项目使用
    deploy                将最终的包复制到远程仓库,供其他开发人员和Maven项目使用
  3.Site Lifecycle: 生成项目报告，站点，发布站点
    pre-site        执行一些在生成项目站点之前需要完成的工作     
    site            生成项目的站点文档
    post-site       执行一些在生成项目站点之后需要完成的工作
    site-deploy     将生成的项目站点发布到服务器上

  编译、测试、打包、集成测试、验证、部署
  清理: 将以前编译的旧的class字节码文件删除,为下一次编译做准备
  编译: 将Java源程序编译成class字节码文件
  测试: 自动测试,自动调用JUnit程序
  报告: 测试程序执行的结果
  打包: 动态Web工程打war包,Java工程打jar包
  安装: 将打包得到的文件复制到仓库的指定位置
  部署: 将动态Web工程生成的war包复制到Servlet容器的指定目录下,使其可以运行

# 常用命令(执行与构建过程相关的Maven命令必须进入pom.xml所在的目录)
mvn clean: 		      清理
mvn compile: 		      编译主程序
mvn test-compile:                编译测试程序
mvn test: 		      执行测试
mvn package: 		      打包
mvn install:                           将自己Maven工程添加到本地仓库
mvn site:                               生成站点
mvn deploy:                         部署
mvn dependency:list           查看当前项目已解析的依赖
mvn dependency:tree         查看当前项目依赖树
mvn dependency:analyze   分析当前项目依赖树
mvn clean install-U              -U参数强行让Maven检查更新
mvn idea:idea                      将项目转换成IDEA项目

# 依赖范围scope
compile:
编译:Y    测试:Y    运行时:Y    例子:sping-core
test:
编译:N    测试:Y    运行时:N    例子:JUnit
provided:
编译:Y    测试:Y    运行时:N    例子:servlet-api
runtime:
编译:N    测试:Y    运行时:Y    例子:JDBC驱动
system:必须通过systemPath元素显示的指定依赖文件
编译:Y    测试:Y    运行时:N    例子:本地的或Maven仓库之外的类库文件
    <dependency>
        <groupId>javax.sql</groupId>
        <artifactId>jdbc-stdext</artifactId>
        <version>2.0</version>
        <scope>system</scope>
        <systemPath>${java.home }/lib/rt.jar</systemPath>
    </dependency>
    <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-core</artifactId>
        <version>1.5</version>
        <scope>system</scope>
        <systemPath>${basedir}/WebContent/WEB-INF/lib/hamcrest-core-1.3.jar</systemPath>
    </dependency>
    <dependency>
        <groupId>coupon-pojo</groupId>
        <artifactId>coupon-pojo</artifactId>
        <version>1.0</version>
        <scope>system</scope>
        <systemPath>${project.basedir}/lib/coupon-pojo-1.0.jar</systemPath>
    </dependency>
如项目打包成war,则在<build>标签下的<plugins>中新增如下配置:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>2.3</version>
    <configuration>
        <warName>${project.artifactId}</warName>
        <webResources>
            <resource>
                <directory>lib/</directory>
                <targetPath>WEB-INF/lib</targetPath>
                <includes>
                    <include>**/*.jar</include>
                </includes>
            </resource>
        </webResources>
    </configuration>
</plugin>
如果工程打包成jar,需要在pom.xml中添加如下配置:
<resources>
    <resource>
        <directory>lib</directory>
        <targetPath>BOOT-INF/lib/</targetPath>
        <includes>
            <include>**/*.jar</include>
        </includes>
    </resource>
</resources>
import:(Maven 2.0.9版本以上)

# 传递依赖范围
            compile     test      provided      runtime    
compile     compile     -         -             runtime
test        test        -         -             test
provided    provided    -         provided      provided
runtime     runtime     -         -             runtime

# eclipse中使用Maven
  指定Maven核心程序位置
  Windows -> Preferences -> Maven -> Installations -> Add ->
  Installation home: D:\Program\Green\64\apache-maven-3.5.2
  Installation name: apache-maven-3.5.2
  
  指定conf/settings.xml文件的位置,进而获取本地仓库的位置
  Windows -> Preferences -> Maven -> User Settings ->
  User Settings: D:\Program\Green\64\apache-maven-3.5.2\conf\settings.xml
  
  设置通过Maven创建工程的JDK版本
  1. 打开settings.xml文件
  2. 找到profiles标签
  3. 加入如下配置
  <profile>   
      <id>jdk1.8</id>    
      <activation>   
          <activeByDefault>true</activeByDefault>    
          <jdk>1.8</jdk>   
      </activation>    
      <properties>   
          <maven.compiler.source>1.8</maven.compiler.source>    
          <maven.compiler.target>1.8</maven.compiler.target>    
          <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>   
      </properties>   
    </profile> 
  </profiles>
  <!-- 使配置好的profiles标签中内容生效 -->
  <activeProfiles>
    <activeProfile>jdk1.8</activeProfile>
  </activeProfiles>

# eclipse中安装Maven插件
Help -> Install New Software... -> 点击Work with:旁边的Add按钮 -> 
        Name: m2e
        Location: http://download.eclipse.org/technology/m2e/releases/1.9/1.9.0.20180606-2036(http://www.eclipse.org/m2e/m2e-downloads.html查找匹配的插件版本地址)
注意: 不要勾选Contact all update sites during install to find required software 

# 非Compile范围的依赖不能传递

# Maven的版本规范
<major version>.<minor version>.<incremental version>-<qualifier>
maven自己判断版本的算法是major,minor,incremental部分用数字比较，qualifier部分用字符串比较，所以要小心 alpha-2和alpha-15的比较关系，最好用 alpha-02的格式。

# 使用production Profile来运行Maven(-X:开启调试输出)
mvn install -Pproduction -X

# Maven仓库
http://mvnrepository.com/

# <optional>true</optional>
当某个依赖的<optional>被定义为true后,该依赖便只能在本项目中传递,不会被传递到引用该依赖的父项目中,父项目需要主动引用才行

# <scope>import</scope>
dependencyManagement放到单独的专门用来管理依赖的pom中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement
注意:import scope只能用在dependencyManagement里面

# jar包冲突问题处理
1.打出所有依赖
mvn dependency:tree > ~/dependency.txt
2.只打出指定groupId和artifactId的依赖关系
mvn dependency:tree -Dverbose 此处一定不要省略-Dverbose参数,要不然是不会显示被忽略的包的
mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId
mvn dependency:analyze-only 检测那些声明了但是没被使用的依赖,如有有一些是你自己声明的那尽量去掉
mvn dependency:analyze-duplicate 分析重复定义的依赖,清理那些重复定义的依赖
3.vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息
-XX:+TraceClassLoading
-verbose
4.greys的sc命令也能清晰的看到当前类是从哪里加载过来的
greys:sc