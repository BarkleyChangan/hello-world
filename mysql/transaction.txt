# 事物的隔离级别: MySQL默认隔离级别是可重复读。
+------------------------------+---------------------+--------------+--------------+--------------+
| 隔离级别                     | 读数据一致性          脏读         | 不可重复 读  | 幻读         |
+------------------------------+---------------------+--------------+--------------+--------------+
| 未提交读(Read uncommitted)   | 最低级别            | 是           | 是           | 是           | 
+------------------------------+---------------------+--------------+--------------+--------------+
| 已提交读(Read committed)     | 语句级              | 否           | 是           | 是           |
+------------------------------+---------------------+--------------+--------------+--------------+
| 可重复读(Repeatable read)    | 事务级              | 否           | 否           | 是           |
+------------------------------+---------------------+--------------+--------------+--------------+
| 可序列化(Serializable)       | 最高级别，事务级    | 否           | 否           | 否           |
+------------------------------+---------------------+--------------+--------------+--------------+
# 查看当前数据库的事务隔离级别：show variables like 'tx_isolation';
# 间隙锁: 当我们用范围条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做"间隙(GAP)"。InnoDB也会对这个"间隙"加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。
# 排他锁也称写锁，独占锁，当前写操作没有完成前，它会阻断其他写锁和读锁。
# 共享锁也称读锁，多用于判断数据是否存在，多个读操作可以同时进行而不会互相影响。当如果事务对读锁进行修改操作，很可能会造成死锁。如下图所示。
# 加锁的方式：自动加锁。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁；当然我们也可以显示的加锁：
  共享锁：select * from tableName where ... + lock in share more
  排他锁：select * from tableName where ... + for update
# 分析行锁定: 通过检查InnoDB_row_lock 状态变量分析系统上的行锁的争夺情况 show status like 'innodb_row_lock%'
  innodb_row_lock_current_waits: 当前正在等待锁定的数量
  innodb_row_lock_time: 		 从系统启动到现在锁定总时间长度；非常重要的参数，
  innodb_row_lock_time_avg: 	 每次等待所花平均时间；非常重要的参数，
  innodb_row_lock_time_max: 	 从系统启动到现在等待最常的一次所花的时间  ；
  innodb_row_lock_waits: 		 系统启动后到现在总共等待的次数；非常重要的参数。直接决定优化的方向和策略。
# 行锁
  行锁的劣势：开销大；加锁慢；会出现死锁
  行锁的优势：锁的粒度小，发生锁冲突的概率低；处理并发的能力强
  加锁的方式：自动加锁。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁；当然我们也可以显示的加锁：
  共享锁：select * from tableName where ... + lock in share more
  排他锁：select * from tableName where ... + for update
  InnoDB和MyISAM的最大不同点有两个：一，InnoDB支持事务(transaction)；二，默认采用行级锁。
# 表锁
  表锁的优势：开销小；加锁快；无死锁
  表锁的劣势：锁粒度大，发生锁冲突的概率高，并发处理能力低
  加锁的方式：自动加锁。查询操作（SELECT），会自动给涉及的所有表加读锁，更新操作（UPDATE、DELETE、INSERT），会自动给涉及的表加写锁。也可以显示加锁：
  共享读锁：lock table tableName read;
  独占写锁：lock table tableName write;
  批量解锁：unlock tables;
# 查看加锁情况: show open tables where in_use > 0; 1表示加锁，0表示未加锁。
# 分析表锁定: 可以通过检查table_locks_waited 和 table_locks_immediate 状态变量分析系统上的表锁定：show status like 'table_locks%'
  table_locks_immediate: 表示立即释放表锁数。
  table_locks_waited: 表示需要等待的表锁数。此值越高则说明存在着越严重的表级锁争用情况。
  此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的存储引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永久阻塞。
  