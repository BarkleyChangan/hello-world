####################### CSS2 #######################
# BFC的特性
1.内部的Box会在垂直方向一个接一个放置
2.BFC的区域不会与float的元素区域重叠
3.内部的Box垂直方向由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠，与方向无关
4.每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）
5.计算BFC的高度时，浮动元素也要参与计算(清除浮动hasLayout)
6.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素,反之也如此。
7.开启BFC的元素可以包含浮动的子元素
8.父元素的垂直外边距不会和子元素重叠

# BFC的渲染规则
1.BFC区域内的元素外边距会发生重叠
2.BFC区域内的元素不会与浮动元素重叠
3.计算BFC区域的高度时,浮动元素也参与计算
4.BFC区域就相当于一个容器,内部的元素不会影响到外部,同样外部的元素也不会影响到内部
5.BFC 区域内部元素的排列和外部元素是一致的,也遵循块元素占一行,行内块元素不占一行等规则

# 开启BFC
1.根元素(html)html元素所在的区域就是一个BFC区域,所以我们平时编写的元素都是在一个BFC区域内渲染的,有很多东西为什么要这样应该有些也理解了
2.浮动元素(元素的float不是none)
3.绝对定位元素(元素的position为absolute或fixed)
4.行内块元素(元素的display为inline-block)
5.表格单元格(元素的display为table-cell,HTML表格单元格默认为该值)
6.表格标题(元素的display为table-caption,HTML表格标题默认为该值)
7.匿名表格单元格元素(元素的display为table、``table-row、table-row-group、``table-header-group、``table-footer-group(分别是HTML table、row、tbody、thead、tfoot的默认属性)或inline-table)
8.overflow值不为visible的块元素
9.display值为flow-root的元素
10.contain值为layout、content或paint的元素
11.弹性元素(display为flex或inline-flex元素的直接子元素)
12.网格元素(display为grid或inline-grid元素的直接子元素)
13.多列容器(元素的column-count或column-width不为auto，包括``column-count为1)
14.column-span为all的元素始终会创建一个新的BFC,即使该元素没有包裹在一个多列容器中(标准变更,Chrome bug)

# 解决高度塌陷
1.开启BFC
2.在高度塌陷父元素最后添加一个空白div,由于这个div没有浮动,所以是可以撑开父元素的,对其清除浮动可以撑开父元素
3.通过after伪类向父元素最后添加一个空白的块元素,然后对其清除浮动
4.兼容IE6 zoom:1
在IE6中如果为元素指定了宽度则会默认开启HasLayout
IE6、IE7没有BFC概念

# BFC简单理解
1. 开启BFC的元素不会被浮动元素所覆盖
2. 开启BFC的元素子元素和父元素外边距不会重叠
3. 开启BFC的元素可以包含的浮动的子元素

a. 设置元素浮动
b. 设置元素为行内块元素
c. 将元素的overflow设置为一个非visible的值

# IE6开启HasLayout
float:left|right
display:inline-block
position:absolute
width:除auto外任何值
height:除auto外任何值
zoom:除normal外任何值
overflow:hidden;
writing-mode:tb-rl;

IE8~IE11通过document.documentElement.currentStyle.hasLayout依然可以获得hasLayout的标志

# 清除浮动
clear可以清除其他浮动元素对当前元素的影响
/* IE6/IE7 */
.clearfix{*zoom:1;}
.clearfix::before,.clearfix::after{content:".";display:block;height:0;visibility:hidden;clear:both;}

由Nicolas Gallagher 大湿提出来的:http://nicolasgallagher.com/micro-clearfix-hack/
/* IE6/IE7 */
.clearfix{*zoom:1;}
/* IE8+ */
.clearfix::before,.clearfix::after{content:"";display:table;clear:both;} 

# 透明度
opcity:0.5;
filter:alpha(opcity=50); /* IE6 */

# 框架集frameset
使用frameset框架集页面中不可以使用body标签

# 条件hack
<!--[if lte IE 6]>

<![endif]-->

# 属性hack
_background-color:red; /* IE6 */
*background-color:red; /* IE7以下 */
\9:IE6+
\0:IE8+和Opera15以下

# IE6双倍边距
在IE6中,当为一个左浮动的元素设置左外边距或者为一个右浮动的元素设置右外边距时,这个外边距将会是设置的值的2倍
display: inline;

# Chrome浏览器默认字体最小为12px

# 初始包含块
初始包含块是一个视窗大小的矩形,但不等于视窗

# 包含块(绝对定位是相对于其包含块进行定位的)
正常情况: 包含块就是离当前元素最近的块级祖先元素
绝对定位情况: 包含块就是离它最近的开启了定位的祖先元素,如果所有的祖先元素都没有开启定位则根元素就是它的包含块
html: 根元素,初始包含块

# 定位参照于谁来定位
没有定位:包含块
相对:       元素本来的位置
绝对:       包含块
               如果最近的祖先元素存在定位元素,则这个定位元素就是包含块
               如果没有,包含块为初始包含块
固定:       视口

# 默认值
left top right bottom width height 默认值:auto
margin padding 默认值:0
border-width 如果不存在border-style则没有border-width

# 百分比参照与谁
width:     包含块的width
margin:   包含块的width
padding: 包含块的width
height:    包含块的height
left:         包含块的width
top:         包含块的height

# 浮动
浮动提升半层

# 省略号样式
display: block;
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;

# 字体族
serif:衬线字体(笔画结尾有衬线)
sans-serif:非衬线字体(笔画结尾平滑)
monospace:等宽字体
cursive:草书字体
fantasy:艺术字体

# font-size
px:
em:em值大小是动态的。当定义font-size时，1em=父元素字体大小
%: 参照父元素的字体大小

# font推荐形式
font: font-style font-weight font-size/line-height font-family;

# 行高
上下文本行基线之间的垂直距离
行距=行高-字体大小
内容区:顶线和底线包裹的区域，有字体大小决定
行内框:
行框:

# vertical-align(img和input元素使用)
参照与整个行内框中行框最高的元素
只对inline-block元素有效

# 百分比
top,height                           百分比参照包含块的高度
left,margin,padding,width 百分比参照包含块的宽度
tranlate(-50%,-50%)           百分比参照自身的宽高
background-position         百分比参照(图片区域-图片的位图像素值)

# 块元素盒模型
垂直外边距重叠
兄弟元素:
兄弟元素间的垂直外边距取两者较大值(两者都是正值)
如果相邻垂直外边距一正一负,则取两者的和
如果相邻垂直外边距都是负值,取绝对值较大者
父子元素:
父子元素间相邻外边距,子元素会传递给父元素(上边距)

# 行内元素盒模型
1. 不支持设置宽度和高度
2. 可以设置padding,但是垂直方向padding不会影响页面布局
3. 可以设置border,但是垂直方向border不会影响页面布局
4. 可以设置margin,但是垂直方向margin不会影响页面布局

# 盒模型
box-sizing: content-box 默认值,宽度和告诉用来设置内容区大小
                    border-box width和height等于border+padding+content

# 定位元素水平布局
left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块宽度
当开启了绝对定位后: 水平方向需要添加left和right
当发生过度约束: 1. 如果9个值中没有auto则自动调整right值以满足等式成立
                           2. 如果有auto,则自动调整auto的值使等式成立
可设置auto的值: margin|width|left|right
                           left|right默认值是auto,如果没有设置等式不满足时,则会自动调整这两个值
NOTE: 祖先元素永远盖不住子元素

# 定位元素垂直布局
top + margin-top + border-top + padding-top + height + padding-bottom + border-bottom + margin-bottom + bottom = 包含块高度

# font-family
serif             衬线字体
sans-serif    非衬线字体
monospace 等宽字体
cursive         草书字体
fantasy         虚幻字体
下载服务器上的字体: 
@font-face {
    font-family:"myfont"; 自定义字体名称
    src:url('./font/123.ttf');
}
为解决兼容性问题,Paul Irish写了称为Bulletproof的一个独特的@font-face语法:
@font-face {
    font-family: ‘myfont’;
    src: url(‘myfont.eot’);                                                                    /* IE9 Compat Modes */
    src: url(‘myfont.eot?#iefix’) format(‘embedded-opentype’),    /* IE6-IE8 */
           url(‘myfont.woff’) format(‘woff’),                                         /* Modern Browsers */
           url(‘myfont.ttf’) format(‘truetype’),                                      /* Safari, Android, iOS */
           url(‘myfont.svg#YourWebFontName’) format(‘svg’);         /* Legacy iOS */
}

# line-height
文字实际占有的高度,如果设置为整数表示字体的倍数,默认1.333
字体框就是字体存在的格子,设置font-size实际就是在设置字体框高度
行高会在字体框上下平均分配
行间距 = 行高 - 字体大小

# font
font: 字体大小/行高 字体族

# 去除图片在div中的下间距
img{vertical-align:middle;}

# white-space处理空白
normal  正常
nowrap 不换行
pre        保留空白
溢出内容设置省略号
white-space:nowrap;
overflow:hidden;
text-overflow:ellipsis;

# background-origin背景图片偏移量计算的原点
padding-box 默认值,background-position从内边距开始计算
content-box  背景图片的偏移量从内容区处计算
border-box   背景图片的偏移量从边框处计算

# background-clip背景裁剪
boder-box     默认值,背景会出现在边框的下边
padding-box 背景不会出现在边框,只出现在内边距和内容区
content-box  背景只会出现在内容区

# background-size背景图片尺寸
第一个值表示宽度
第二个值表示高度
如果只写一个值,则第二个值默认是auto
cover:    图片比例不变,将元素铺满
contain: 图片比例不变,将图片在元素中完整显示

# background-attachment背景图片是否跟随元素移动
scroll
fixed

# 渐变是图片,通过backgroun-img设置
background-img:linear-gradient(to left|top|right|bottom,red,yellow); 线性渐变

# 自定义变量
html{--color:yellow;}
.box1{background:var(--color);}

# 透明度
opacity:0.5;
filter:alpha(opacity=50);
####################### CSS2 #######################

####################### CSS3 #######################
# CSS规范地址
https://www.w3.org/TR/selectors
https://developer.mozilla.org/zh-CN/

# animate.css动画库
https://daneden.github.io/animate.css/

# 属性选择器
div[attr]
div[attr=val]
div[attr~=val]:以空格分隔,并且包含指定val的元素

div[attr|=val]:以val-开头或者等于val的元素
div[attr^=val]:以val(包括val)开头的元素
div[attr$=val]:以val(包括val)结尾的元素
div[attr*=val]:包含val的元素

# 伪类和为元素选择器
a标签伪类顺序(lvha): link -> visited -> hover -> active
:target: 代表一个特殊的元素,它的id必须的是URL中的hash
:visited: 只有color、background-color、border-color才能被应用到已访问的链接

# 表单伪类
:enabled 匹配编辑的表单元素
:disable 匹配被禁用的表单元素
:checked 匹配被选中的表单元素
:focus   匹配获取焦点的表单元素

# 结构性伪类(index从1开始计数)
:nth-child(index) index可以为n(0-正无穷)、odd(奇数)、even(偶数)
    :first-child
	:last-child
	:nth-last-child(index) 倒序
	:only-child            独生子
:nth-of-type(index)       NOTE:以元素为标准
    :first-of-type
	:last-of-type
	:nth-last-type(index) 倒序
	:only-of-type         独生子
:not
:empty

# 伪元素
::before
::after
::firstLetter
::firstLine
::selection

# 重要声明和非重要声明
选择器的特殊性表述为4个部分    0,0,0,0
1.ID属性                       0,1,0,0
2.类属性,属性选择器,伪类         0,0,1,0
3.元素和伪元素选择器             0,0,0,1
4.通配符选择器                  0,0,0,0
5.结合(,)对选择器特殊性没有贡献
6.内联声明的特殊性              1,0,0,0
7.继承没有特殊性

重要声明: 在分号之前插入!important;

# 自定义字体
@font-face{font-family:"Damu";src:url(font/BAUHS93.TTF);}
div{font:50px "Damu";}

# 新增UI样式
1.文本
透明度: opacity:0.1; 0:透明;1:不透明(不继承,但是对子元素有影响)
颜色: rgba(0,0,0,0.8);
文字阴影: text-shadow:color offset-x offset-y blur-radius; (不可继承)
         text-shadow:#000 5px 5px 10px,pink 20px 20px 20px;
元素模糊: filter:blur(10px);
文字排版: direction:rtl;unicode-bidi:bidi-override;
多余文字省略: (display:block;)white-space:nowrap;overflow:hidden;text-overflow: ellipsis;
2.盒模型
box-shadow:inset 10px 10px 10px 10px #00BFFF;
box-sizing:border-box; 高度和宽度包括padding
允许调整大小: resize:auto;overflow:hidden;
3.样式
圆角: border-radius:60% 0;
边框图片:
border-image-source
border-image-slice
border-image-repeat
border-image-width
border-image-outset
4.背景
background-color
background-image 支持多背景,逗号分隔,前一个覆盖后一个
background-repeat
background-position
background-attachment

默认情况从padding+box开始绘制,从border+box裁剪
background-origin border-box|padding-box|content-box设置背景渲染的起始位置
background-clip
background-size:auto auto;
background 简写属性
5.渐变
线性渐变
background-image:linear-gradient(to right,red,green);
                 repeating-linear-gradient 
径向渐变
background-image:radial-gradient(closest-corner circle at 10px 10px,red blue);

# 过渡
NOTE(坑): 
1. transition元素在首次渲染还没有结束的情况下是不会触发的
2. 在大部分变换样式切换时,如果变换函数的位置、个数不相同也不触发过渡
transition-property 默认all;并不是所有属性都可以动画
transition-duration 0需带上单位ms|s
transition-timing-function ease(默认值)|linear(匀速)|ease-in|ease-out
transition-delay
检查过度是否完成事件: transitionend|webkitTransitionend,当设置了多个属性过度会触发多次,如果设置了display="none"则不会触发事件
testNode.addEventListener("transitionend",function(){ });

# 2D变形transform(只对块级元素有效,变换在组合时是从右往左的)
旋转rotate 单位:deg
平移translate|translateX|translateY 单位:px
倾斜skew|skewX|skewY 单位:deg
缩放scale|scaleX|scaleY
基点的变换transform-origin
矩阵matrix

# 3D变换
景深perspective: 我们肉眼离显示器的距离,景深越大离我们越远,效果就不好
尽量避免景深叠加
perspective-origin: 默认值50% 50%
rotateX|rotateY|rotateZ
rotate3d(x,y,z,deg);
translateZ 注意不能给百分比
transform-style:preserve-3d 营造有层级3D舞台,不可继承属性作用域子元素
backface-visibility

# 动画
animation-name 指定应用一系列动画,每个名称代表一个由@keyframes定义的动画序列;none:代表无关键帧
animation-duration 动画周期时长;负值无效
animation-timing-function linear(匀速)
animation-delay 动画外属性
animation-iteration-count 动画次数(只作用于动画内属性,重复的是关键帧)
animation-direction reverse(反转的是关键帧)|alternate
animation-fill-mode: 控制元素在动画外的状态
                                    forwards to之后的状态与to状态保持一致
                                    backwards from之前的状态与from状态保持一致
                                    both forwards+backwards
animation-play-state 动画执行的运行和暂停
@
示例:
#test{animation-name: move;animation-duration: 3s;}
@keyframes move{from{transform: rotate(0deg);}to{transform: rotate(360deg);}}

# Flex
注意:设为Flex布局以后,子元素的float、clear和vertical-align属性都将是失效
旧版本 display:-webkit-box;
Safari  display:-webkit-flex;
新版本 display:flex;
flex容器
flex项目:永远在主轴"正"方向排列
主轴main axis
侧轴cross axis
旧版本属性:
容器上的属性->
1. -webkit-box-orient:horizontal|vertical; 主轴和侧轴分别是哪一根
2. -webkit-box-direction:normal|reverse; 控制主轴方向
3. -webkit-box-pack: 主轴
                                     start    富余空间在右边(x)或下边(y)
                                     center 富余空间在两边
                                     end     富余空间在左边(x)或上边(y)
                                     justify 富余空间在项目之间
4. -webkit-box-align: 侧轴
                                     start    富余空间在右边(x)或下边(y)
                                     center 富余空间在两边
                                     end     富余空间在左边(x)或上边(y)
项目上的属性->
-webkit-box-flex:1; 弹性空间管理将主轴上的富于空间按比例分配到项目上
新版本属性:
容器上的属性->
1. flex-direction:row|column;
2. flex-direction:row-reverse|column-reverse;
3. justify-content: 主轴
                              flex-start           富余空间在主轴正方向
                              center                富余空间在两边
                              flex-end             富余空间在主轴反方向
                              space-between 富余空间在项目之间
                              space-around   富余空间在项目两边,旧版没有此属性
4. align-items:      侧轴
                              flex-start           富余空间在侧轴正方向
                              center                富余空间在两边
                              flex-end             富余空间在侧轴反方向
                              baseline             按基线对齐(旧版没有)
                              stretch                等高布局(旧版没有)
项目上的属性->
flex-grow:1; 弹性空间管理将主轴上的富于空间按比例分配到项目上

新版本新增属性:
容器上的属性->
flex-wrap:nowrap|wrap|wrap-reverse; 控制了容器为单行/列还是多行/列,并定义了侧轴的方向
align-content:flex-start|flex-end|center|space-between; 定义弹性容器的侧轴方向上有额外空间时,如何排布每一行/列
flex-flow 是flex-direction和flex-wrap的简写
项目上的属性->
order 值越大越往后排
align-self
flex-grow 可用空间=容器大小-所有相邻项目flex-basis的总和
                  可扩展空间=可用空间/所有相邻项目flex-grow的总和
                  每项伸缩大小=伸缩基准值+(可扩展空间*flex-grow值)
flex-shrink 前提条件flex-wrap:nowrap;默认值1
                   每项flex收缩大小=伸展基准值-(收缩比例/收缩比例总和*溢出空间)
                   1. 计算收缩因子与基准值乘的总合
                   2. 计算收缩因数 (收缩因数=项目的收缩因子*项目基准值)/第一步计算总和
                   3. 移除空间的计算 移除空间=项目的收缩因数*负溢出的空间
flex-basis
flex

# 响应式布局
媒体类型: all|screen|print
媒体属性: width 可加min-min-、max-、max-前缀
                height  min-、max-max-前缀
                device-width  可加min-、max-前缀
                device-pixel-ratio  可加min-、max-前缀,需要加webkit前缀
                orientation portrait(竖屏)|landscape(横屏)
操作符,关键字 only|and|,|not

# Flex布局
要使用弹性盒,必须先将一个元素设置为弹性容器
display:flex;            设置为块级弹性容器
display:inline-flex; 设置为行内弹性容器

容器上的属性
flex-direction:row|row-reverse|column|column-reverse;                                    决定主轴的方向（即项目的排列方向）
flex-wrap:nowrap(默认)|wrap|wrap-reverse;                                                         设置弹性元素是否在弹性容器中自动换行
flex-flow:<flex-direction>||<flex-wrap>;                                                              flex-direction属性和flex-wrap属性的简写形式,默认值为row nowrap
justify-content:flex-start|flex-end|center|space-between|space-around;           项目在主轴上的对齐方式
align-items:flex-start|flex-end|center|baseline|stretch(默认值);                            项目在侧轴上的对齐方式
align-content:flex-start|flex-end|center|space-between|space-around|stretch; 多根轴线的对齐方式。如果项目只有一根轴线,该属性不起作用。

元素上的属性:
order:<integer>;                                                                     定义项目的排列顺序.数值越小,排列越靠前,默认为0
flex-grow:<number>;                                                             定义项目的放大比例,默认为0,即如果存在剩余空间,也不放大
flex-shrink:<number>;                                                            定义了项目的缩小比例,默认为1,即如果空间不足,该项目将缩小
flex-basis:<length>|auto(默认值);                                          定义了在分配多余空间之前,项目占据的主轴空间(main size)浏览器根据这个属性,计算主轴是否有多余空间.它的默认值为auto,即项目的本来大小
flex:none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]; flex-grow,flex-shrink和flex-basis的简写,默认值为0 1 auto.后两个属性可选.该属性有两个快捷值:auto(1 1 auto)和none(0 0 auto)
align-self:auto|flex-start|flex-end|center|baseline|stretch;  允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性.默认值为auto,表示继承父元素的align-items属性,如果没有父元素,则等同于stretch

# 视口单位
100vw = 一个视口宽度
vw永远相对于
1 rem = 1 html的字体大小
html{font-size:5.3333vw;} // 1 rem = 40px(设计图)
html{font-size:100*40/750vw;}

# 媒体查询
@media only 查询规则{}
                        媒体类型: all|print|screen|speech
                        width: 视口宽度
                        height: 视口高度
                        ,: 或
                        and: 与
@media only screen and (max-width:768px){}
@media only screen and (min-width:768px) and (max-width:992px){}
@media only screen and (min-width:992px) and (max-width:1200px){}
@media only screen and (min-width:1200px){}
####################### CSS3 #######################

####################### Mobile #######################

####################### Mobile #######################
# touch-action
设置触摸屏用户如何操纵元素的区域(例如，浏览器内置的缩放功能)
auto: 当触控事件发生在元素上时,由浏览器来决定进行哪些操作,比如对viewport进行平滑、缩放等
none: 当触控事件发生在元素上时,不进行任何操作
####################### 垂直水平居中 #######################
# 文本水平居中
text-align:center;

# 文本垂直居中
line-height:height;

# 图片垂直水平居中
html,body{height:100%;}
body{text-align:center;}
body:after{content:"";display:inline-block;height:100%;vertical-align: middle;}
img{vertical-align:middle;}

# 未知元素宽高绝对定位的垂直水平居中
a{position:absolute;left:50%;top:50%;transform:translate3d(-50%,-50%,0);}

# 已知元素宽高绝对定位垂直水平居中
.test{position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;width:200pxheight:300px;background:pink;}

# 利用text-align和vertical-align垂直水平居中
1.给它的父元素写text-align属性
2.要居中的元素将其类型转为inline-block
3.要居中的元素加vertical-align属性
4.添加一个“标尺”,既同级元素(span等),要居中的元素与其互相垂直居中
NOTE:在编辑时标尺与需要居中的元素之间不能有空格回车
标尺须加:
display:inline-block;
width:0;(目的是隐藏标尺)
height:100%(与父元素等高，中线位置既是居中位置);
vertical-align:middle;

.div1{width:200px;height:200px;background:blue;margin:20px 20px;text-align:center;}
.div2{width:100px;height:100px;background:red;display:inline-block;vertical-align:middle;}
.div1 span{width:0px;height:100%;background:pink;display:inline-block;vertical-align:middle;}
####################### 垂直水平居中 #######################