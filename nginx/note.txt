一、安装Linux操作系统
    1. 安装虚拟机
        a. 文件->新建虚拟机->典型(推荐)->稍后安装操作系统
        b. 如果物理机支持大于4GB以上的单个文件选择"将虚拟磁盘存储为单个文件"
        c. 移除声卡、USB控制器、打印机这些设备
    2. 安装Linux操作系统
        a. 取消勾选"系统时钟使用UTC时间"
    3. 查看内存空间(-m表示以MB的数据存储单位进行显示)
       free -m
    4. 查看磁盘空间(-lh表示方便阅读的数据存储单位显示本地文件系统)
       df -lh
    5. 查看所有网卡
       ifconfig -a
    6. 配置静态IP
       修改/etc/sysconfig/network-scripts/ifcfg-eth0文件
       a. 备份改配置文件
          cp ifcfg-eth0 ifcfg-eth0.bak
       b. 修改文件
          ONBOOT=yes
          BOOTPROTO=static
          IPADDR=192.168.57.5
          NETMASK=255.255.255.0
          GATEWAY=192.168.57.2
          DNS1=192.168.57.2
       c. 使配置生效
          service network reload
          systemctl restart network
       d. 查看当前系统的默认网关、DNS服务器
          route | grep default
    7. 访问测试
       ping 192.168.57.1 -c4

二、安装jdk
    1. mkdir /usr/local/java
    2. 检查jdk安装包
       rpm -qa | grep java
    3. 卸载openjdk
       rpm -e --nodeps tzdata-java-2016g-2.el7.noarch
       rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64
       rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64
       rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64
       rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64
       或者使用: yum remove *openjdk*
    4. 解压
       tar -zxvf jdk-8u171-linux-x64.tar.gz
    5. 设置环境变量
       vi /etc/profile

       # java environment
       export JAVA_HOME=/usr/local/jdk1.8.0_171  
       export JRE_HOME=${JAVA_HOME}/jre  
       export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  
       export PATH=${JAVA_HOME}/bin:$PATH
    6. 执行profile文件
       source /etc/profile
    7. 检查新安装的jdk
       java -version

三、安装tomcat
    1. mkdir /usr/local/tomcat
    2. 解压
       tar -zxvf apache-tomcat-9.0.10.tar.gz
    3. 配置防火墙
       iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
       # 保存配置 
       service iptables save
       # 重启服务
       /etc/rc.d/init.d/iptables restart
       # 查看已开放端口
       /etc/init.d/iptables status
       # 删除端口（2表示上面的num列）
       /sbin/iptables  -D INPUT 2
    4. 查看防火墙状态
       service iptables status
    5. 使用特定用户启动tomcat
       chown -R nobody:nobody /usr/local/tomcat
       sudo -E -u nobody /usr/local/tomcat/bin/startup.sh
    6.修改server.xml配置文件
       URIEncoding="UTF-8"
       useBodyEncodingForURI="true"

四、安装nginx
    1. 下载Nginx
       wget http://nginx.org/download/nginx-1.16.1.tar.gz
    2. 安装需要编译的插件
       yum install gcc c++ // 用于编译 C、C++ 代码的 GCC
       yum install -y pcre pcre-devel // 用 C 语言编写的正则表达式函数库 Pcre(使用 Rewrite 模块)
       yum install -y zlib zlib-devel // 用于数据压缩的函式库的 Zlib
       yum install -y openssl openssl-devel // 安全套接字层密码库 OpenSSL（启用 SSL 支持）
       NOTE:由于openssl-devel依赖于zlib-devel通过yum安装时会自动解决依赖
       yum -y install pcre-devel openssl-devel
    3. 解压
       cd /usr/src
       tar -zxvf nginx-1.10.3.tar.gz
    4. 配置编译选项
       cd nginx-1.10.3
       ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_realip_module
    5. 编译安装
       make && sudo make install

       重新安装: rm -rf /usr/local/nginx/*
                       cd /usr/src/nginx-1.10.3
                       make clean
                       make && make install
    6. 启动、停止Nginx命令
       cd /usr/local/nginx/sbin
       ./nginx
       // -c指定加载的nginx配置文件
       ./nginx -c /usr/local/nginx/conf/nginx.conf 
       ps aux | grep nginx
       ./nginx -s stop 立即停止
       ./nginx -s quit 从容停止
       kill pid
       killall nginx
    7. Nginx其他命令
       nginx -s reload 在Nginx启动的情况下重新加载配置文件(提示:nginx服务中只要涉及到IP地址的修改,都需要重启nginx服务,而不能采用平滑重启)
       nginx -s reopen 重新打开日志文件
       nginx -c /特定目录/nginx.conf 以特定目录下的配置文件启动Nginx
       nginx -t 检测当前配置文件是否正确
       nginx -t -c /特定目录/nginx.conf 检测特定目录下的Nginx配置文件是否正确
       nginx -v 显示版本信息
       nginx -V 显示版本信息和编译选项
    8. 查看端口占用
       netstat -tlnp
    9. 配置防火墙
       iptables -I INPUT -p tcp --dport 80 -j ACCEPT
       #指定为IP地址为192.168.78.11开通80端口
       iptables -R INPUT l -s192.168.78.11 -ptcp --dport 80 -j ACCEPT
       service iptables save

       firewall-cmd --zone=public --add-service=http --permanent
       firewall-cmd --zone=public --add-port=80/tcp --permanent
       firewall-cmd --reload
    10.查看防火墙状态
       service iptables status

       firewall-cmd --list-all
    11.添加环境变量(推荐将Nginx放入/usr/local/sbin目录中)
       ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx
    12.添加系统服务
       vi /etc/init.d/nginx

       #! /bin/bash
       #chkconfig: 35 85 15
       DAEMON=/usr/local/nginx/sbin/nginx
       case "$1" in
         start)
            echo "Starting nginx daemon..."
            $DAEMON && echo "SUCCESS"
         ;;
         stop)
            echo "Stopping nginx daemon..."
            $DAEMON -s quit && echo "SUCCESS"
         ;;
         reload)
            echo "Reloading nginx daemon..."
            $DAEMON -s reload && echo "SUCCESS"
         ;;
         restart)
            echo "Restarting nginx daemon..."
            $DAEMON -s quit
            $DAEMON && echo "SUCCESS"
         ;;
         *)
            echo "Usage:service nginx (start|stop|restart|reload)"
            exit 2
         ;;
       esac

       chmod +x /etc/init.d/nginx
       查看系统所有服务
       chkconfig --list
       设置开机启动Nginx服务
       chkconfig --add nginx
       取消开机启动Nginx服务
       chkconfig --del nginx
    13. 关闭访问日志
        access_log off;
    14. 关闭错误日志
        error_log /dev/null;
    15. 查看Nginx版本及其编译选项
        nginx -V
    16. 配置HTTPS网站(使用OpenSSL将自己作为CA为自己颁发证书)
        mkdir /usr/local/nginx/conf/ssl
        cd /usr/lcoal/nginx/conf/ssl
        # 生成服务器RSA私钥
        openssl genrsa -out server.key 2048
        # 生成服务器CSR证书请求文件
        openssl req -new -key server.key -out server.csr
        # CA为服务器认证证书
        openssl x509 -req -days 360 -in server.csr -signkey server.key -out server.crt
        # 配置文件
        upstream web_server {
          server 192.168.57.11:8080;
          server 192.168.57.12:8080;
          # 与后端服务器保持的长连接数
          keepalive 32;
        }
        server {
          listen 443;
          server_name test.com www.test.com;
          client_max_body_size 20m;
          ssl on;
          ssl_certificate   /usr/local/nginx/conf/ssl/server.crt;
          ssl_certificate_key /usr/local/nginx/conf/ssl/server.key;
          location / {
            proxy_pass http://web_server;
            # 后端服务器使用HTTP1.1
            proxy_http_version 1.1;
            # 允许跨域请求
            add_header Access-Control-Allow-Origin *;
            # 清空客户端Connection消息头
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          }
        }

五、 Linux命令
    # 查询端口是否开放
      firewall-cmd --query-port=8080/tcp
    # 开放80端口
      firewall-cmd --permanent --add-port=80/tcp
    # 移除端口
      firewall-cmd --permanent --remove-port=8080/tcp
    # 重启防火墙(修改配置后要重启防火墙)
      firewall-cmd --reload

    # 重新读取网卡设备的配置文件
      start_udev

    # 统计连接数
      netstat -n | grep :80 | wc -l

六、自动切割日志
vi autolog.sh

#!/bin/bash
#当前Nginx日志文件存放的目录
logs_path="/usr/local/nginx/logs"
#备份日志文件
mv $logs_path/access.log $logs_path/`date +"%Y%m%d%H%M"`.log
#重新打开Nginx日志
/usr/local/nginx/sbin/nginx -s reopen

chmod +x autolog.sh
crontab -e 编辑当前用户的定时任务
0 0 * * * /usr/local/nginx/logs/autolog.sh > /dev/null 2>&1

crontab -l 显示当前用户的crontab文件内容
crontab -r 删除设置的任务计划

七、nginx.conf配置文件说明
worker_processes      配置Nginx工作进程数,一般设为CPU总核数或者总核数的两倍
worker_connections  配置Nginx允许单个进程并发连接的最大请求数
include                       用于引入配置文件
    include 文件目录/*;           # 匹配所有文件
    include 文件目录/*.conf;   # 匹配以.conf结尾的文件
    include 文件目录/*.proxy; # 匹配以.proxy结尾的文件
default_type              设置默认文件类型
sendfile                     默认值为on,表示开启高效文件传输模式
keepalive_timeout   设置长链接超时时间(单位:秒)
listen                        监听端口,默认监听80端口
server_name            设置主机域名
root                          设置主机站点根目录地址
index                        指定默认索引文件
error_page               自定义错误页面

八、nginx配置文件中location前缀含义
/    默认匹配网站资源信息
!    对匹配的内容进行取反
=  精确匹配并且终止搜索
~  区分大小写的正则表达式匹配
~* 不区分大小写的正则表达式匹配
^~ 普通字符匹配，使用前缀匹配
@  用于定义一个location块,且该块不能被外部客户端所访问,只能被Nginx内部配置指令所访问
/mp3/ 指定匹配网站资源目录信息

匹配优先级: = > ^~ > 正则 > 普通最大前缀匹配

九、日志级别
debug < info < notice < warn < error < crit
级别越高记录内容越简单

十、关闭错误日志
error_log /dev/null

十一、手工备份日志文件
cd /usr/local/nginx/logs
mv access.log 20190619.log
/usr/local/nginx/sbin/nginx -s reopen

十二、显示目录列表
autoindex on | off;

autoindex常⽤参数:
autoindex_exact_size off; 
默认为on， 显示出⽂件的确切⼤⼩，单位是bytes
修改为off，显示出⽂件的⼤概⼤⼩，单位是kB或者MB或者GB
autoindex_localtime on;
默认为off，显示的⽂件时间为GMT时间
修改为on， 显示的⽂件时间为⽂件的服务器时间
charset utf-8,gbk;
默认中⽂⽬录乱码，添加上解决乱码

autoindex_exact_size off; 表示以kB/MB/GB为单位显示文件的大概大小
autoindex_localtime on;   表示显示的时间为文件的服务器时间

十三、 设置请求的IP地址
proxy_set_header Host $host;
proxy_set_header X-Client-IP $remote-addr;

十四、Nginx+Tomcat动静分离配置
server {
  listen 80;
  server_name tomcat.ng.test;
  root /usr/local/tomcat/webapps/ROOT;
  index index.html index.htm index.jsp index.do;
  location ~/(WEB-INF|META-INF){
    deny all;
  }
  locaiton ~\.(jsp|do)${
    proxy_pass http://127.0.0.1:8080;
    proxy_set_header X-Client-IP $remote_addr
  }
  location ~^/(docs|examples)(/.*)*${
    root /usr/local/tomcat/webapps;
  }
}

十五、配置反向代理
server {
  listen:80
  server_name test.ng.test;
  # 域名test.ng.test的请求全部转发到web服务器192.168.57.11
  location / {
    # proxy_pass指令用于设置后端服务器地址
    proxy_pass http://192.168.57.11:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
server {
  listen 80;
  server_name test.web.com;
  # 域名test.web.com的请求全部转发到web服务器192.168.57.12
  location / {
    proxy_pass http://192.168.57.12:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}

十六、配置负载均衡
# 配置负载均衡服务器组,upstream指令实现负载均衡
upstream web_server {
  server 192.168.57.11:8080;
  server 192.168.57.12:8080;
  # 与后端服务器保持的长连接数
  keepalive 32;
}
# 配置域名为www.test.com的虚拟主机
server {
  listen 80;
  server_name test.com www.test.com;
  client_max_body_size 20m;
  location / {
    proxy_pass http://web_server;
    # 后端服务器使用HTTP1.1
    proxy_http_version 1.1;
    # 允许跨域请求
    add_header Access-Control-Allow-Origin *;
    # 清空客户端Connection消息头
    proxy_set_header Connection "";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}

十七、加权轮询负载均衡(weight值越大被分配到的概率越大)
upstream web_server {
  server 192.168.57.11:8080 weight=1;
  server 192.168.57.12:8080 weight=3;
}

十八、ip_hash负载均衡(不能使用weight和backup设置)
upstream web_server {
  ip_hash;
  server 192.168.57.11:8080;
  server 192.168.57.12:8080;
}

十九、永久缓存配置
server {
  listen 80;
  server_name test.ng.test;
  location / {
    # 指定缓存文件保存目录
    root cache;
    proxy_store on;
    proxy_store_access user:rw group:rw all:r;
    proxy_temp_path cache_tmp;
    if (!-e $request_filename) {
      proxy_pass http://192.168.57.11;
    }
  }
}

二十、临时缓存配置(在http块下添加如下配置)
# 代理临时目录
proxy_temp_path /usr/local/nginx/proxy_temp_dir
# Web缓存目录和参数设置
proxy_cache _pach /usr/local/nginx/proxy_cache_dir levels=1:2 keys_zone=cache_one:50m inactive=1m max_size=500m

二十一、开启gzip压缩
http {
  gzip on;
  gzip_types text/plain application/javascript text/css;
  # 按照原始数据大小以16KB为单位4倍申请内存
  gzip_buffers 4 16k;
  # 压缩级别
  gzip_comp_level 4;
  # 设置浏览器为IE6时不进行压缩防止出现页面假死
  gzip_diable "MSIE [1-6].";
  # 当响应内容大于5KB时进行压缩输出
  gzip_min_length 5k;
  # 只有是HTTP/1.0协议的请求时才会进行gzip压缩
  gzip_http_version 1.0;
  # Nginx作为反向代理服务器时无条件压缩所有结果数据
  gzip_proxied any;
  # 在响应头中添加Vary: Accept-Encoding
  gzip_vary on;
}

二十二、rewrite重写
server {
  listen 80;
  server_name test.ng.test;
  index index.html index.htm;
  root html;
  if (!-e $request_filename) {
    rewrite "^/.*" /default/default.html break;
  }
}

二十三、rewrite实现重定向
server {
  listen 80;
  server_name test.ng.test;
  root html;
  set $name $1;
  rewrite ^/img-([0-9]+).jpg$ /img/$name.jpg permanent;
}

二十四、图片防盗链
location ~*\.(gif|jpg|png|swf|flv)$ {
  valid_referers www.ng.test ng.test;
  if($invalid_referer) {
    return 403;
  }
}

二十五、优化
# 1. 优化Nginx连接数
# Nginx根据CPU核心数来工作进程个数
worker_processes auto;
# 最多打开的文件数量
worker_rlimit_nofile 65535;
events {
  # 每个工作进程可接收的连接数
  worker_connections 65535;
  # 是否允许一个工作进程相应多个请求
  multi_accept on;
}

# 2. 限制同一个IP并发数
以下对同一个IP地址只允许10个并发连接,当超时时返回503错误
http {
  # 开辟一个共享内存空间保存客户端IP地址,空间名称为perip,大小为10MB
  limit_conn_zone $binary_remote_addr zone=perip:10m;
  # 限制连接数量
  limit_conn perip 10;
}

# 3. 限制服务器并发数
http {
  limit_conn_zone $server_name zone=perserver:10m;
  server {
    listen 80;
    server_name localhost;
    limit_conn perserver 20;
  }
}

# 4. 限制响应传输速率
http {
  # 限制每个连接的传输速率(每秒100KB)
  limit_rate 100k;
  # 在已经传输指定大小后再进行限速,实现只针对大文件限制下载速度,如果省略此指令则无论大小为多少都会限速
  limit_rate_after 10m;
}

# 5. 静态资源缓存
server {
  locationn ~\.(gif|jpg|jpeg|png|bmp|swf)$ {
    # 30天后过期
    expires 30d;
  }
  location ~\.(css|js)$ {
    # 12小时后过期
    expires 12h;
  }
}

二十六、与Keepalived整合搭建高可用方案
# 下载Keepalived
http://www.keepalived.org

# 解压 & 编译 & 安装
cd /usr/local
tar -zxvf keepalived-1.2.24.tar.gz
cd keepalived-1.2.24
./configure

# 检查确保如下信息为yes
Use VRRP Framework      :Yes
Use VRRP VMAC           :Yes
Use VRRP authentication :Yes

make && make install

# 添加系统服务,配置开机启动
cd /usr/local/etc/rc.d/init.d
cp keepalived /etc/init.d/keepalived
chmod +x /etc/init.d/keepalived
chkconfig keepalived on

# 链接配置文件
cd /usr/local/etc/sysconfig
ln -s `pwd`/keepalived /etc/sysconfig/keepalived

# 链接程序文件
cd /usr/local/sbin
ln -s `pwd`/keepalived /usr/sbin/keepalived

# 创建Keepalived配置文件
mkdir /etc/keepalived
vi /etc/keepalived/keepalived.conf

vrrp_script chk_nginx {         # 配置用于检测Nginx运行状态的j脚本
  script "/chk_nginx.sh"        # 用于检测的脚本文件路径
  interval 2                    # 每2秒执行一次脚本
  weight -20                    # 当检测失败时,权重发生的变化
}

vrrp_instance VI_1 {            # 配置一个虚拟路由名称为VI_1
  state MASTER                  # 指定Keepalived的角色,MASTER或BACKUP
  interface eth0                # 指定监测的网卡
  virtual_router_id 21          # 虚拟路由的标识,同一个VRRP的MASTER和BACKUP应一致
  mcast_src_ip  192.168.78.21   # 设置Real IP(可省略,默认将自动使用网卡的主IP)
  priority 100                  # 优先级、权重(权重最高的主机将接管Virtual IP)范围0~254
  advert_int 1                  # MASTER和BACKUP之间同步检查的时间间隔,单位:秒
  authentication {              # 设置验证类型和密码
    auth_type PASS              # 验证类型,PASS表示使用密码验证
    auth_pass 123456            # 设置密码,用于MASTER和BACKUP之间使用相同的密码通信
  }
  virtual_ipaddress {           # 设置一个Virtual IP地址池,每行一个
    192.168.78.20               # 为MASTER和BACKUP设置相同的Virtual IP
  }
  track_script {
    chk_nginx                   # 检测Nginx
  }
}

# 创建监控Nginx的sh脚本
vi chk_nginx.sh

#! /bin/bash
A=`ps -C nginx –no-header |wc -l`
if [ $A -eq 0 ];then
    /usr/local/nginx/sbin/nginx
    sleep 2
    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then
        killall keepalived
    fi
fi

chmod +x /chk_nginx.sh
service keepalived reload

# 启动Keepalived服务
service keepalived start
ps aux | grep keepalived

# 配置备用服务器
vrrp_instance VI_2 {
  state BACKUP                  # 修改身份为BACKUP
  priority 90                   # 修改优先级为90(低于MASTER即可)
}

# 添加防火墙规则
iptables -I INPUT -s192.168.78.22 -p112 -jACCEPT
service iptables save

# 日志格式
log_format  main  '$remote_addr  - $remote_user [$time_local] "$request" '
                 '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" "$host"  "$cookie_ssl_edition" '
                 '"$upstream_addr"   "$upstream_status"  "$request_time"  '
                 '"$upstream_response_time" ';
Nginx 日志变量说明：
$remote_addr：记录访问网站的客户端源地址信息
$remote_user：访问客户端认证用户信息
$time_local：记录访问时间与时区
$request：用户的http请求行信息
$status：http状态码，记录请求返回的状态码，例如：200、301、404等
$http_referer：记录此次请求是从哪个连接访问过来的，可以根据该参数进行防盗链设置。
$body_bytes_sent：服务器发送给客户端的响应body字节数
$http_user_agent：记录客户端访问信息，例如：浏览器、手机客户端等
$http_x_forwarded_for：当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置

# nginx错误日志记录级别
debug,info,notice,warn,error,crit

# Nginx错误日志定义语法
error_log file [level];
Default:error_log /var/log/nginx/error.log warn;
Context:main,http,mail,stream,server,location
关键字不能变，日志文件可以指定任意存放日志的目录，错误日志级别越高记录的信息越少，一般只记录error，不要配置info等较低的级别，会带来巨大磁盘I/O消耗

# 重要的指令
proxy_pass_header            设置Nginx服务器响应报文头
proxy_set_header               设置Nginx发送给被代理服务器的请求头
proxy_connect_timeout     设置Nginx服务器与后端被代理服务器尝试连接的超时时间
proxy_read_timeout           设置Nginx服务器向后端被代理服务器发出read请求后等待响应超时时间
proxy_send_timeout           设置Nginx服务器向后端被代理服务器发出write请求后等待响应超时时间
proxy_http_version 1.0|1.1 设置Nginx服务器提供代理服务的HTTP协议版本
proxy_ignore_client_abort  设置客户端终端网络请求时Nginx服务器是否中断对被代理服务器的请求(off)
proxy_redirect                      设置被代理服务器返回的响应头中的Locaiton和Refresh与proxy_pass指令配合使用
proxy_redirect redirect replacement;
proxy_redirect default;
proxy_redirect off;
proxy_redirect ~^http://192.168.1.154:8080(.*) http://www.boke.com$1;
proxy_intercept_errors         设置被代理服务器返回400或者大于400状态码时是否使用Nginx自己定义的错误页(使用error_page指令)
                                                off:Nginx服务器直接将被代理服务器返回的HTTP状态返回给客户端
proxy_ssl_session_reuse       是否使用基于SSL安全协议连接被代理服务器(off)
proxy_cache_bypass             设置Nginx向客户端发送响应数据时,不从缓存获取的条件
proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment $http_pragma $http_authorization
proxy_cache_min_uses          设置客户端请求发送的次数,当到达设定次数后对该请求响应数据做缓存
proxy_cache_use_stale          被代理服务器无法访问时Nginx使用历史缓存响应客户端请求

# Linux配置两个辅助IP 10.4.7.101和10.4.7.102
ip addr add 10.4.7.101/24 dev eth0 label eth0:1
ip addr add 10.4.7.102/24 dev eth0 label eth0:2
检查是否配置成功:
ip add | grep -E "101|102"
