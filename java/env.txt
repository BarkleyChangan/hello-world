1. jdk环境变量设置
	JAVA_HOME: E:\ServerSoftware\Java\jdk1.8.0_141
	CLASSPATH: .;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\jre\lib\dt.jar
	Path:      在末尾加入 ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin
开始运行输入cmd打开命令行窗口，输入java -version，显示版本1.7.0_51，输入javac -version，也显示1.7.0_51，说明JDK安装及环境变量配置成功。
2. tomcat环境变量设置
	CATALINA_HOME: E:\ServerSoftware\Java\apache-tomcat-9.0.0.M26

3. Spring框架下载地址: 
	https://repo.spring.io/libs-release-local/org/springframework/spring/

4. Maven环境变量设置
    MAVEN_HOME: D:\ProgramFile\Green\apache-maven-3.5.0
    Path:       在末尾加入 ;%MAVEN_HOME%\bin
    MAVEN_OPTS: -Xms512m -Xmx1024m
    中央仓库:   ping repo1.maven.org
	
	4.1 设置本地仓库路径: conf/settings.xml文件中找到<localRepository>标签
	4.2 在eclipse中配置Maven
		Window->Preferences->Maven->Installations->Add:
		Installation home: D:\Program\Green\64\apache-maven-3.5.2
		Installation name: apache-maven-3.5.2
		然后别忘了勾选我们自己的Maven。
	4.3 制定我们Maven仓库位置，也就是让eclipse知道我们的仓库在哪
		Window->Preferences->Maven->User Settings
		User Settings: D:\Program\Green\64\apache-maven-3.5.2\conf\settings.xml
	4.4 重构索引，即将仓库中的内容让eclipse加载一下
		Show View->Other->Maven Repositories->在Local Repository上右键点击Rebuild Index
		这样就能在eclipse local Repository中查看我们本地仓库的内容了
	4.5 设置全局的jdk，在setting.xml文件中的profiles元素下添加如下profile元素：
		<profile>  
			<id>jdk18</id>  
			<activation>  
				<activeByDefault>true</activeByDefault>  
				<jdk>1.8</jdk>  
			</activation>  
			<properties>  
				<maven.compiler.source>1.8</maven.compiler.source>  
				<maven.compiler.target>1.8</maven.compiler.target>  
				<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>  
			</properties>   
		</profile>
	4.6 设置局部的jdk，在项目的pom,xml文件中添加如下build元素：
		<build>  
			<plugins>  
				<plugin>  
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-compiler-plugin</artifactId>  
					<configuration>  
						<source>1.8</source>  
						<target>1.8</target>
						<encoding>UTF-8</encoding>  
					</configuration>  
				</plugin>  
			</plugins>  
		</build> 