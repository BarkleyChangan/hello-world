####################### env #######################
1. jdk环境变量设置
	JAVA_HOME: E:\ServerSoftware\Java\jdk1.8.0_141
	CLASSPATH: .;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\jre\lib\dt.jar
	Path:      在末尾加入 ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin
开始运行输入cmd打开命令行窗口，输入java -version，显示版本1.7.0_51，输入javac -version，也显示1.7.0_51，说明JDK安装及环境变量配置成功。
2. tomcat环境变量设置
	CATALINA_HOME: E:\ServerSoftware\Java\apache-tomcat-9.0.0.M26

3. Spring框架下载地址: 
	https://repo.spring.io/libs-release-local/org/springframework/spring/

4. Maven环境变量设置
    MAVEN_HOME: D:\ProgramFile\Green\apache-maven-3.5.0
    Path:       在末尾加入 ;%MAVEN_HOME%\bin
    MAVEN_OPTS: -Xms512m -Xmx1024m
    中央仓库:   ping repo1.maven.org
	
	4.1 设置本地仓库路径: conf/settings.xml文件中找到<localRepository>标签
	4.2 在eclipse中配置Maven
		Window->Preferences->Maven->Installations->Add:
		Installation home: D:\Program\Green\64\apache-maven-3.5.2
		Installation name: apache-maven-3.5.2
		然后别忘了勾选我们自己的Maven。
	4.3 制定我们Maven仓库位置，也就是让eclipse知道我们的仓库在哪
		Window->Preferences->Maven->User Settings
		User Settings: D:\Program\Green\64\apache-maven-3.5.2\conf\settings.xml
	4.4 重构索引，即将仓库中的内容让eclipse加载一下
		Show View->Other->Maven Repositories->在Local Repository上右键点击Rebuild Index
		这样就能在eclipse local Repository中查看我们本地仓库的内容了
	4.5 设置全局的jdk，在setting.xml文件中的profiles元素下添加如下profile元素:
		<profile>
			<id>jdk18</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<jdk>1.8</jdk>
			</activation>
			<properties>
				<maven.compiler.source>1.8</maven.compiler.source>
				<maven.compiler.target>1.8</maven.compiler.target>
				<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
			</properties>
		</profile>
	4.6 设置局部的jdk，在项目的pom,xml文件中添加如下build元素：
		<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
			</plugins>
		</build>
####################### env #######################

####################### cmd #######################
# 编译Java程序(有依赖jar包)
javac -encoding UTF-8 -Djava.ext.dirs=./ -d . /root/.ssh/download/SFTPClientUtil.java

# 执行Java程序(有依赖jar包)
java -Djava.ext.dirs=./ SFTPClientUtil
####################### cmd #######################

####################### Java基础 #######################
# 查看当前Java程序应用使用的什么垃圾收集器
jps -l
jinfo -flag UseParallelGC 4216

# 除法运算
整数除法会直接砍掉小数,而不是进位

# 数值类型转换
从float和double转换为整数值时,小数位将被截断。若你想对结果进行四舍五入,可以使用java.lang.Math的round()方法

# 三元表达式的类型转化规则
若两个表达式类型相同,返回值类型为该类型
若两个表达式类型不同,但类型不可转换,返回值类型为Object类型
若两个表达式类型不同,但类型可以转化,先把包装数据类型转化为基本数据类型,然后按照基本数据类型的转换规则（byte<short(char)<int<long<float<double）来转化,返回值类型为优先级最高的基本数据类型

# 异或运算
1 ^ 1->0
0 ^ 0->0
0 ^ 1->1

# 按位非~
由于~是一元运算符,所以不可与=联合使用

# 移位运算
只能用于处理整数类型
左移位运算符<<能将其左边的运算对象向左移动右侧指定的位数（在低位补 0）
右移位运算符有“正”、“负”值:若值为正,则在高位插入0;若值为负,则在高位插入1
无符号右移>>>,它使用了“零扩展”（zero extension）:无论正负,都在高位插入0
如果移动 char、byte 或 short,则会在移动发生之前将其提升为 int,结果为 int
移位可以与等号 <<= 或 >>= 或 >>>= 组合使用。左值被替换为其移位运算后的值。但是,当无符号右移与赋值相结合时,若将其与byte或short一起使用的话,则结果错误。取而代之的是,它们被提升为 int 型并右移,但在重新赋值时被截断结果为 -1

# Integer缓存范围
[-128, 127]

# Integer.toBinaryString
若将较小的类型传递给Integer.toBinaryString()时,类型将自动转换为int

# 最大值二进制表示
char c = 0xffff; //最大char型16进制值
byte b = 0x7f; //最大byte型16进制值;
short s = 0x7fff; //最大short型16进制值

# 表达式运行(隐式转型)
表达式中最大的数据类型是决定表达式结果的数据类型.float型和double型相乘,结果是double型的;int和long相加,结果是long型

# 换行
%n实现的可以忽略平台间差异而生成适当的换行符,但只有当你使用System.out.printf()或System.out.format()时;对于System.out.println(),我们仍然必须使用\n

# 内部类访问外部类对象
OuterClass.this;

# 创建内部类对象
OuterClass.Inner inner = outer.new Inner();

# Function命名规则
1.如果只处理对象而非基本类型，名称则为 Function，Consumer，Predicate 等
2.如果接收的参数是基本类型，则由名称的第一部分表示，如 LongConsumer，DoubleFunction，IntPredicate 等，但基本 Supplier 类型例外
3.如果返回值为基本类型，则用 To 表示，如 ToLongFunction <T> 和 IntToLongFunction
4.如果返回值类型与参数类型一致，则是一个运算符：单个参数使用 UnaryOperator，两个参数使用 BinaryOperator
5.如果接收两个参数且返回值为布尔值，则是一个谓词（Predicate）
6.如果接收的两个参数类型不同，则名称中有一个 Bi

# 死锁发生的四个必要条件
1.互斥,共享资源X和Y只能被一个线程占用
2.占有且等待,线程T1已经取得共享资源 X,在等待共享资源 Y 的时候,不释放共享资源 X
3.不可抢占,其他线程不能强行抢占线程T1占有的资源
4.循环等待,线程T1等待线程T2占有的资源,线程T2等待线程T1占有的资源,就是循环等待

# instanceof
null instanceof Object返回false

# 避免使用BigDecimal(double val)构造方法
BigDecimal bd = new BigDecimal(3.1415926D);
System.out.println(bd.toPlainString());
RESULT:3.14159260000000006840537025709636509418487548828125

# 格式化修饰符
%[argument_index$][flags][width][.precision]conversion
argument_index:从1开始

# Integer的Class对象并不是Number的Class 对象的子类
ERROR:Class<Number> clazz = int.class;

# RandomAccessFile类的模式设置
r	只支持读，任何有关写的操作将会抛出异常
rw	支持读和写，如果文件不存在，将尝试创建
rws	类似于"rw"，需要同步更新文件的内容或者元数据到底层存储设备上
rwd	类似于"rws"，与"rws"不同的在于没有对元数据的要求

# 序列化
1.实现Serializable接口
private static final long serialVersionUID = 1L;
2.实现Externalizable接口
public void writeExternal(ObjectOutput out){}
public void readExternal(ObjectInput out){}
3.给类添加方法
private void writeObject(ObjectOutputStream stream) throws IOException{
    stream.defaultWriteObject();
}
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException{
    stream.defaultReadObject();
}
4.序列化静态字段
public static void serializaStaticState(ObjectOutputStream os) throws IOException {
    os.writeInt(color);//要想序列化必须加入特定的方法在序列化时调用此方法
}
public static void deserializeStaticState(ObjectInputStream os) throws IOException {
    color = os.readInt();
}

# 元注解
@Target	表示注解可以用于哪些地方。可能的 ElementType 参数包括：
		CONSTRUCTOR：构造器的声明
		FIELD：字段声明（包括 enum 实例）
		LOCAL_VARIABLE：局部变量声明
		METHOD：方法声明
		PACKAGE：包声明
		PARAMETER：参数声明
		TYPE：类、接口（包括注解类型）或者 enum 声明
		TYPE_PARAMETER: 表示该注解能写在类型变量的声明语句中（如：泛型声明）
		TYPE_USE: 表示该注解能写在使用类型的任何语句中
@Retention	表示注解信息保存的时长。可选的 RetentionPolicy 参数包括：
		SOURCE：注解将被编译器丢弃
		CLASS：注解在 class 文件中可用，但是会被 VM 丢弃
		RUNTIME：VM 将在运行期也保留注解，因此可以通过反射机制读取注解的信息
@Documented	将此注解保存在 Javadoc 中
@Inherited	允许子类继承父类的注解
@Repeatable	允许一个注解可以被使用一次或者多次（Java 8）

# happens-before的规则
程序次序规则（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。
监视器锁规则（Monitor Lock Rule）：一个unLock操作在时间上先行发生于后面对同一个锁的lock操作。
volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作在时间上先行发生于后面对这个量的读操作。
线程启动规则（Thread Start Rule）：Thread对象的start()先行发生于此线程的每一个动作。
线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测。
线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。
对象终结规则（Finalizer Rule）：一个对象的初始化完成先行发生于它的finalize()方法的开始。
传递性（Transitivity）：A在B之前发生，B在C之前发生，那么A在C之前发生。

# 泛型
在JDK1.5之后,数据类型得到了扩充,出历史原始类型扩充了四种泛型类型:参数化类型(ParameterizedType)、类型变量类型(TypeVariable)、限定符类型(WildcardType)、泛型数组类型(GenericArrayType)

# HashMap初始化容量大小计算
(int)((float)expectedSize/0.75F + 1.0F)

# BigDecimal
1. 使用new BigDecimal("19.98")字符串构造函数初始化,不要使用double类型的构造函数
2. 比较相等不要使用equal,因为这个equals方法不仅要比较数值是否相同,还要比较精度是否相同
3. setScale(2,RoundingMode.HALF_UP)四舍五入

# show-busy-java-threads
https://github.com/oldratlee/useful-scripts/tree/master

# Java8获取UTC
LocalDateTime.now(ZoneId.of("Europe/London"));
LocalDateTime.now(ZoneOffset.of("Z"));

# 北京时间转美国时间
ZoneOffsetTransition zot = ZoneOffsetTransition.of(LocalDateTime.now().withNano(0),ZoneOffset.of("+8"),ZoneOffset.of("-6"));
System.out.println(zot.getDateTimeBefore());
System.out.println(zot.getDateTimeAfter());

1. 先用中国变换规则和中国时间计算出那一瞬间
ZoneRules chinaRules = ZoneId.of("Asia/Shanghai").getRules();
ZoneOffset chinaOffset = chinaRules.getOffset(chinaTime);
Instant instant = chinaTime.toInstant(chinaOffset);
2. 算出的这个瞬间instant是世界通用的，然后用它去计算芝加哥在这一瞬间的时间偏移量
ZoneRules usaRules = ZoneId.of("America/Chicago").getRules();
ZoneOffset usaOffset = usaRules.getOffset(instant);
3. 待转换的时间，转换前时间偏移量，转换后时间偏移量这三者都有了，就变成一个确定的情况了
ZoneOffsetTransition china2usa = ZoneOffsetTransition.of(chinaTime, chinaOffset, usaOffset);
china2usa.getDateTimeBefore();
china2usa.getDateTimeAfter();

# substring方法在JDK1.6中的优化
str = str.substring(1, 3) + "";

# 设置该变量可以保存动态代理类，默认名称$Proxy0.class
System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");

# 如何设置线程池数量
CPU密集型:线程数=CPU核数 +1
IO密集型:   线程数=CPU核心数 * (1 + IO 耗时/ CPU 耗时)

# 乘法和除法使用移位操作符
val << 3; -> val * 8
val >> 1; -> val / 2

# 设置JDK生成的代理类落盘
System.setProperty("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");
####################### Java基础 #######################

####################### JDK8 #######################
# JDK官方的Base64和sun的base64是不兼容的

# Period其实只能计算同月的天数、同年的月数,不能计算跨月的天数以及跨年的月数
// parseToDate方法作用是将String转为LocalDate，略。
LocalDate date1 = parseToDate("2020-05-12");
LocalDate date2 = parseToDate("2021-05-13");
// 计算日期间隔,结果为1
int period = Period.between(date1,date2).getDays();
# 正确做法
long period = date2.toEpochDay()-date1.toEpochDay();
long period = date1.until(date2,ChronoUnit.DAYS);
long period = ChronoUnit.DAYS.between(date1, date2); // 推荐
####################### JDK8 #######################

####################### 阻塞队列 #######################
# BlockingQueue
是一个支持两个附加操作的队列。这两个附加的操作是：
1. 在队列为空时,获取元素的线程会等待队列变为非空
2. 当队列满时,存储元素的线程会等待队列可用

ArrayBlockingQueue	由数组结构组成的有界阻塞队列（最常用）
LinkedBlockingQueue	由链表结构组成的有界阻塞队列（最常用）注意：一定要指定大小
PriorityBlockingQueue	支持优先级排序的无界阻塞队列。默认自然升序排列
DelayQueue		支持延时获取元素的无界阻塞队列。
SynchronousQueue	不存储元素的阻塞队列（可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程）
LinkedTransferQueue	由链表结构组成的无界阻塞队列
LinkedBlockingDeque	由链表结构组成的双向阻塞队列（双向队列指的是可以从队列的两端插入和移出元素）

# 核心方法
方法\处理方式	抛出异常	返回特殊值	一直阻塞	超时退出
插入方法	add(e)		offer(e)		put(e)		offer(e,time,unit)
移除方法	remove()	poll()		take()		poll(time,unit)
检查方法	element()	peek()		不可用		不可用
####################### 阻塞队列 #######################

####################### 定时器 #######################
# Timer
1. Timer底层是使用单线程来处理多个Timer任务,这意味着所有任务实际上都是串行执行,前一个任务的延迟会影响到之后的任务的执行
2. 由于单线程的缘故,一旦某个定时任务在运行时,产生未处理的异常,那么不仅当前这个线程会停止,所有的定时任务都会停止
3. Timer任务执行是依赖于系统绝对时间,系统时间变化会导致执行计划的变更
####################### 定时器 #######################

####################### JVM #######################
# 虚拟机进程状况工具
jps [ options ] [hostid]
       -q 只输出LVMID,省略主类的名称
       -m 输出虚拟机进程 启动时传递给主类main()函数的参数
       -l   输出主类的全名,如果进程执行的是jar包,输出jar路径
       -v  输出虚拟机进程启动时JVM参数

# Java进程内线程堆栈信息
jstack [option] vmid
jstack [option] executable core
jstack [option] [server-id@]remote-hostname-or-ip
            -F 当正常输出的请求不被响应时,强制输出线程堆栈
            -l long listings,显示额外的锁信息;在发生死锁时用jstack -l pid来观察锁持有情况
            -m mixed mode,如果调用本地方法,可以显示C/C++堆栈信息(比如Native方法)

# 虚拟机统计信息监视工具
堆内存 = 年轻代 + 年老代 + 永久代
年轻代 = Eden区 + 两个Survivor区（From和To）
jstat [ option vmid [interval [s|ms] [count]] ]
vmid: 本地虚拟机进程VMID与LVMID一直;远程虚拟机进程VMID格式为:[protocol:][//]lvmid[@hostname[:port]/servername]
           -class                 监视类装载、卸载数量、总空间及类装载所耗费的时间
           -gc                      监视Java堆状况,包括Eden区、2个Survivor区、老年代、永久代等容量、已用空间、GC时间合计等信息
           -gccapacity        监视内容与-gc基本相同,但输出主要关注Java堆各个区域使用到的最大和最小空间
           -gcutil                 监视内容与-gc基本相同,单输出主要关注已使用空间占总空间的百分比
           -gccause             与-gcutil功能一样,但是会额外输出导致上一次GC产生的原因
           -gcnew                监视新生代GC的状况
           -gcnewcapacity  监视内容与-gcnew基本相同,输出主要关注使用到的最大和最小空间
           -gcold                  监视老年代GC的状况
           -gcoldcapacity    监视内容与-gcold基本相同,输出主要关注使用到的最大和最小空间
           -gcpermcapacity 输出永久代使用到的最大和最小空间
           -compiler              输出JIT编译器编译过的方法、耗时等信息
           -printcompilation 输出已经被JIT编译的方法
各个列含义:
S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）
EC、EU：Eden区容量和使用量
OC、OU：年老代容量和使用量
PC、PU：永久代容量和使用量
YGC、YGT：年轻代GC次数和GC耗时
FGC、FGCT：Full GC次数和Full GC耗时
GCT：GC总耗时

# Java配置信息工具
jinfo [ option ] pid
           -flag 显示指定参数的值
           -sysprops 把虚拟机进程的System.getProperties()内容打印
jinfo -flag CMSInitiatingOccupancyFraction 49912

# Java内存映像工具(-XX:+HeapDumpOnOutOfMemoryError让虚拟机在OOM异常出现后自动生成dump文件)
jmap [option] pid
jmap [option] executable core
jmap [option] [server-id@]remote-hostname-or-ip
如果运行在64位JVM上,可能需要指定-J-d64命令选项参数
           -dump 生成Java堆转储快照;格式为:-dump:[live,]format=b,file=filename,其中live子参数说明是否只dump出存活的对象
           -finalizerinfo 显示在F-Queue中等待Finalizer线程执行finalize方法的对象,只在Linux/Solaris平台下有效
           -heap 显示Java堆详细信息,如使用哪种回收器、参数配置、分代状况等.只在Linux/Solaris平台下有效
           -histo 显示堆中对象统计信息,包括类、实例数量和合计容量
           -permstat 以ClassLoader为统计口径显示永久代内存状态,只在Linux/Solaris平台下有效
           -F 当虚拟机进程对-dump选项没有响应时,可使用这个选项强制生成dump快照.只在Linux/Solaris平台下有效
jmap -permstat pid
jmap -heap pid 查看进程堆内存使用情况
jmap -histo[:live] pid 查看堆内存中的对象数目、大小统计直方图
jmap -histo:live 'pid of java' > /tmp/jmap00
jmap -dump:format=b,file=dumpFileName pid把进程内存使用情况dump到文件中

# Java Heap Analysis Tool虚拟机堆转储快照分析工具(内置微型HTTP/HTML服务器)
jhat
示例:
jmap -dump:format=b,file=/tmp/dump.dat 21711
jhat -port 9998 /tmp/dump.dat 注意:如果dump文件太大,可能需要加上-J-Xmx512m参数指定最大堆内存
jhat -J-Xmx512m -port 9998 /tmp/dump.dat 然后就可以在浏览器中输入主机地址:9998查看了
在线分析dump文件网址:https://console.perfma.com/

# hprof(Heap/CPU Profiling Tool)展现CPU使用率,统计堆内存使用情况
java -agentlib:hprof[=options] ToBeProfiledClass
java -Xrunprof[:options] ToBeProfiledClass
javac -J-agentlib:hprof[=options] ToBeProfiledClass

# DEMO:找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息
1. 找出Java进程ID,部署应用名为mrf-center:
ps -ef | grep mrf-center | grep -v grep
2. 找出该进程内最耗费CPU的线程
ps -Lfp pid
ps -mp pid -o THREAD,tid,time
top -Hp pid TIME列就是各个Java线程耗费的CPU时间
3. 将线程ID转为十六进制
printf '%x\n' 21742
4. 堆栈信息中找出线程信息
jstack pid | grep 54ee
####################### JVM #######################

####################### Web #######################
# 在Bean中获取Request对象
HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();

# 使用超链接访问web资源,绝对路径的写法推荐使用下面的写法改进
${pageContext.request.contextPath}/index.jsp
<%=request.getContextPath()%>

# 设置不缓存
response.setDateHeader("expries",-1);
response.setHeader("Cache-Control","no-cache");
response.setHeader("Pragma","no-cache");

# 设置浏览器定时刷新网页
response.setHeader("refresh","3");//设置refresh响应头控制浏览器每隔3秒钟刷新一次

# 跳转
//1.调用sendRedirect方法实现请求重定向
resp.sendRedirect("ranImg");

//2.使用response设置Location响应头并设置状态码
//resp.setHeader("Location","download");
//resp.setStatus(HttpServletResponse.SC_FOUND);

# jsp9大内置对象
request
response
pageContext jsp的上下文对象
session
application    ServletContext对象
config             ServletConfig对象
out
page
exception       isErrorPage="true"

# jsp页面中同意使用print方法
out.write() 非字符串参数会有问题
out.print()

# jsp静态引入
<%@ include file=""%>
request,response,out对象其实是引用main.jsp中的对象

# jsp动态引入
<jsp:include page="">
    <jsp:param name="pwd" value="123456"/>
</jsp:include>

# jsp请求转发
<jsp:forward page="/scope2.jsp"/></jsp:forward>

# 去掉jsp过于的空格
web.xml中加入以下配置
<jsp-config>
	<jsp-property-group>
		<url-pattern>*.jsp</url-pattern>
		<trim-directive-whitespaces>true</trim-directive-whitespaces>
	</jsp-property-group>
</jsp-config>

# Content-Type的格式
type/subtype(;parameter)? type
以text开头的媒体格式类型：
text/html:HTML格式
text/plain:纯文本格式
text/xml:XML格式

以image开头的媒体格式类型：
image/gif:gif图片格式
image/jpeg:jpg图片格式
image/png:png图片格式

以application开头的媒体格式类型：
application/xhtml+xml:XHTML格式
application/xml:XML数据格式
application/atom+xml:Atom XML聚合格式 
application/json:JSON数据格式
application/pdf:pdf格式 
application/msword:Word文档格式
application/octet-stream:二进制流数据（如常见的文件下载）
application/x-www-form-urlencoded:<form encType=””>中默认的encType,form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）

上传文件之时使用的：
multipart/form-data:需要在表单中进行文件上传时,就需要使用该格式
####################### Web #######################

####################### EL表达式 #######################
# 判断值是否为null,空串,集合元素个数为0
${empty}

# 11个隐含对象
pageContext        PageContextImpl          获取jsp中的9大内置对象
pageScope           Map<String,Object>
requestScope       Map<String,Object>
sessionScope       Map<String,Object>
applicationScope Map<String,Object>
param                    Map<String,String>
paramValues         Map<String,String[]>
header                   Map<String,String>
headerValues        Map<String,String[]>
cookie                    Map<String,Cookie>
initParam               Map<String,String>
initParam               Map<String,String> 获取web.xml中配置的<context-param>上下文参数
####################### EL表达式 #######################

####################### JSTL表达式 #######################
http://java.sun.com/jsp/jstl/core             核心库c
http://java.sun.com/jsp/jstl/fmt               格式化fmt
http://java.sun.com/jsp/jstl/functions     函数fn
http://java.sun.com/jsp/jstl/sql                数据库sql
http://java.sun.com/jsp/jstl/xml               xml;x

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
####################### JSTL表达式 #######################

####################### API #######################
sign的值一般是将所有非空参数按照升续排序然后+token+key+timestamp+nonce(随机数)拼接在一起，然后使用某种加密算法进行加密，作为接口中的一个参数sign来传递，也可以将sign放到请求头中。
####################### API #######################

####################### Java问题排查 #######################
# 倒数300行并进入实时监听文件写入模式
tail -300f catalina.out

# 目录下查找所有符合关键字的文件
grep 'log' /home/admin -r -n

# 指定文件后缀查找文件内容
grep 'shopbase' /home/admin -r -n --include *.{vm,java}
grep 'shopbase' /home/admin -r -n --exclude *.{vm,java}
seq 10 | grep 5 -A 3    # 下匹配
seq 10 | grep 5 -B 3    # 上匹配
seq 10 | grep 5 -C 3    #上下匹配，平时用这个就妥了

# find
sudo -u admin find /home/admin /tmp /usr -name \*.log(多个目录去找)
find . -iname \*.txt(大小写都匹配)
find . -type d(当前目录下的所有子目录)
find /usr -type l(当前目录下所有的符号链接)
find /usr -type l -name "z*" -ls(符号链接的详细信息 eg:inode,目录)
find /home/admin -size +250000k(超过250000k的文件，当然改成-就是小于了)
find /home/admin f -perm 777 -exec ls -l {} \; (按照权限查询文件)
find /home/admin -atime -1  1天内访问过的文件
find /home/admin -ctime -1  1天内状态改变过的文件    
find /home/admin -mtime -1  1天内修改过的文件
find /home/admin -amin -1  1分钟内访问过的文件
find /home/admin -cmin -1  1分钟内状态改变过的文件    
find /home/admin -mmin -1  1分钟内修改过的文件

# top
ps -ef | grep java
top -H -p pid

# netstat
netstat -nat | awk '{print $6}' | sort | uniq -c | sort -rn

# java
jps -mlvV
jstack 2815
jstack -m 2815 # native+java栈
jinfo -flags 2815 # 可看系统启动的参数
jmap -heap 2815 # 查看堆的情况
jmap -dump:live,format=b,file=/tmp/heap2.bin 2815 # dump
jmap -dump:format=b,file=/tmp/heap3.bin 2815
jmap -histo 2815 | head -10 # 看看堆都被谁占用
jstat -gcutil 2815 1000

# VM options
你的类到底是从哪个文件加载进来的:-XX:+TraceClassLoading
结果形如[Loaded java.lang.invoke.MethodHandleImpl$Lazy from D:\programme\jdk\jdk8U74\jre\lib\rt.jar]

应用挂了输出dump文件:-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/logs/java.hprof

# java进程悄无声息的消失
dmesg | grep -i kill | less
####################### Java问题排查 #######################

####################### 垃圾收集器 #######################
# 查看当前JVM使用的垃圾收集器
java -XX:+PrintCommandLineFlags -version

# 垃圾收集器分类
1.Serial收集器
Serial收集器是一个单线程的垃圾收集器，并且在执行垃圾回收的时候需要Stop The World。虚拟机运行在Client模式下的默认新生代收集器。Serial收集器的优点是简单高效，对于限定在单个CPU环境来说，Serial收集器没有多线程交互的开销
2.Serial Old收集器
Serial Old是Serial收集器的老年代版本，也是一个单线程收集器。主要也是给在Client模式下的虚拟机使用。在Server模式下存在主要是做为CMS垃圾收集器的后备预案，当CMS并发收集发生Concurrent Mode Failure时使用
3.ParNew收集器
ParNew是Serial收集器的多线程版本，新生代是并行的（多线程的），老年代是串行的（单线程的），新生代采用复制算法，老年代采用标记整理算法。可以使用参数:-XX：UseParNewGC使用该收集器，使用-XX：ParallelGCThreads可以限制线程数量
4.Parallel Scavenge垃圾收集器
Parallel Scavenge是一种新生代收集器，使用复制算法的收集器，而且是并行的多线程收集器。Paralle收集器特点是更加关注吞吐量（吞吐量就是cpu用于运行用户代码的时间与cpu总消耗时间的比值）。可以通过-XX:MaxGCPauseMillis参数控制最大垃圾收集停顿时间；通过-XX:GCTimeRatio参数直接设置吞吐量大小；通过-XX:+UseAdaptiveSizePolicy参数可以打开GC自适应调节策略，该参数打开之后虚拟机会根据系统的运行情况收集性能监控信息，动态调整虚拟机参数以提供最合适的停顿时间或者最大的吞吐量。自适应调节策略是Parallel Scavenge收集器和ParNew的主要区别之一
5.Parallel Old收集器
Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法
6.CMS（Concurrent Mark Sweep）收集器（并发标记清除）
CMS收集器是一种以获取最短回收停顿时间为目标的收集器。CMS收集器是基于标记-清除算法实现的，是一种老年代收集器，通常与ParNew一起使用
7、G1（Garbage-First）收集器
G1收集器将新生代和老年代取消了，取而代之的是将堆划分为若干的区域，每个区域都可以根据需要扮演新生代的Eden和Survivor区或者老年代空间，仍然属于分代收集器，区域的一部分包含新生代，新生代采用复制算法，老年代采用标记-整理算法
通过将JVM堆分为一个个的区域（region）,G1收集器可以避免在Java堆中进行全区域的垃圾收集。G1跟踪各个region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据回收时间来优先回收价值最大的region
G1收集器的特点:
并行与并发:G1能充分利用多CPU，多核环境下的硬件优势，来缩短Stop the World，是并发的收集器
分代收集:G1不需要其他收集器就能独立管理整个GC堆，能够采用不同的方式去处理新建对象、存活一段时间的对象和熬过多次GC的对象
空间整合:G1从整体来看是基于标记-整理算法，从局部（两个Region）上看基于复制算法实现，G1运作期间不会产生内存空间碎片
可预测的停顿:能够建立可以预测的停顿时间模型，预测停顿时间
和CMS收集器类似，G1收集器的垃圾回收工作也分为了四个阶段:
初始标记
并发标记
最终标记
筛选回收
####################### 垃圾收集器 #######################

####################### Linux下安装JDK #######################
https://www.oracle.com/java/technologies/javase-jdk8-downloads.html
1. 查看linux上面所有的jdk安装包
rpm -qa | grep jdk
2. 卸载对应的包
rpm -e --nodeps 包名
3. 检查是否还有jdk
java -version
4. 删除残留的jdk文件
找文件夹:find / -name jdk -d
找文件:find / -name jemalloc.sh
5. 查看Linux服务器是多少位的系统
getconf LONG_BIT
6. 解压
tar -zxvf jdk-8u171-linux-x64.tar.gz
7. 配置环境变量
vi /etc/profile

JAVA_HOME=/usr/local/jdk1.8.0_171
CLASSPATH=.:$JAVA_HOME/lib
PATH=$JAVA_HOME/bin:$PATH
export PATH JAVA_HOME CLASSPATH
运行命令让配置生效:
source /etc/profile
8. 检查是否正确
java -version
####################### Linux下安装JDK #######################

####################### Java与MySQL类型映射 #######################
Java类型                        SQL类型
boolean                        BIT
byte                              TINYINT
short                             SMALLINT
int                                 INTEGER
long                              BIGINT
String                           CHAR,VARCHAR,LONGVARCHAR
byte array                     BINARY , VAR BINARY
java.sql.Date                 DATE
java.sql.Time                 TIME
java.sql.Timestamp        TIMESTAMP
####################### Java与MySQL类型映射 #######################