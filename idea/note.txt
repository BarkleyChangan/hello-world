1. \bin\idea64.exe.vmoptions
   \bin\idea.exe.vmoptions
   -Xms512m
   -Xmx1500m
   -XX:ReservedCodeCacheSize=480m

   -Xms1024m
   -Xmx4096m
   -XX:ReservedCodeCacheSize=1024m
   -XX:+UseCompressedOops
   
2. 视图设置
   View->Toolbar
   View->Tool Buttons

3. 配置默认打开的项目的JDK
   File -> Other Settings -> Default Project -> Structure -> Project Settings -> Project -> Project SDK

   File -> Other Settings -> Default Project -> Structure -> Platform Settings -> SDKs

4. Settings
   a. 设置鼠标滚轮修改字体大小
   Editor -> General -> 勾选Change font size(Zoom) with Ctrl+Mouse Wheel

   b. 设置鼠标悬浮提示
   Editor -> General  > 勾选Show quick documentation on mouse move Delay(ms):1000

   c. 设置自动导包功能
   Editor -> General -> Auto Import -> Insert imports on paster: All
                                       勾选Add unambiguous imports on the fly
                                       勾选Optimize imports on the fly(for current project)

    d. 设置显示行号和方法间的间隔符
    Editor -> General -> Appearance > Show line numbers
                                      Show method separators

    e. 忽略大小写提示
    Editor -> General -> Code Completion -> Case sensitive completion: None

    f. 取消单行显示tabs
    Editor -> General -> Editor Tabs -> 取消勾选Show tabs in single row

    g. 修改类头的文档注释信息
    Editor -> File and Code Templates -> Includes -> File Header
    /**
     *@author Barkley.Chang
     *@date ${YEAR}-${MONTH}-${DAY} ${HOUR}:${MINUTE}
     */

    h. 设置项目文件编码
    Editor -> File Encodings -> Global Encoding: UTF-8 ->
      Project Encoding:UTF-8
      Default encoding for properties files:UTF-8(勾选Transparent native-to-ascii conversion)

    i. 设置自动编译
    Build,Execution,Deployment -> Compiler -> 勾选Build project automatically -> 勾选Compile independent modules in parallel

    j. 调试优化
    Build,Execution,Deployment -> Debugger -> Transport: Shared memory

    k. 取消自动更新
    Appearance & Behavior -> System Settings -> Updates -> 取消勾选Automatically Check updates for

    l. 选择jdk
       Ctrl + Alt + Shift + S(Project Structure) -> Platform Settings -> SDKs -> Name: 1.8
          JDK home path: D:\program\install\64\Java\jdk1.8.0_162
       Settings -> Build,Execution,Deployment -> Compiler -> Java Compiler -> 取消勾选User '--release' option for cross-compilation(Java 9 and later)
       Project bytecode version: 8

    m. 自动编译
       File -> settings -> Build,Execution,Deployment -> Compiler -> 勾选Build project automatically

    n. 显示内容使用量
       File -> Settings -> Apperance & Behavior -> Appearance -> Window Options -> Show Memory indicator

    o. Ctrl+鼠标滚轴修改字体大小
       File -> Settings -> Editor -> General -> 勾选Change font size (Zoom) with ctrl+Mouse Wheel

    p. 显示多行Tab
       File -> Settings -> Editor -> General -> Editor Tabs -> 取消勾选Show tabs in one row
       Tab limit: 设置最多展示多少个Tab

    q. 自动生成serialVersionUID
       File->Settings->Editor->Inspections->选中Serializable class without 'serialVersionUID'

    r. 请求进入到断点后自动激活Debug窗口
       File -> settings -> Build,Execution,Deployment -> Debugger -> 勾选Show debug window on breakpoint

    s. 配置Tomcat
       File -> settings -> Build,Execution,Deployment -> Application Servers ->点击+ -> Tomcat Server

    t. 用*标识编辑过的文件
      Editor -> General -> Editor Tabs -> 选中Mark modifyied tabs with asterisk

    u. 取消注释被格式化
      Editor -> Code Style -> Java -> JavaDoc选项卡 -> 取消勾选的Enable JavaDoc formatting

    v. 设置缓冲区的输出日志大小
    Editor -> General -> Console -> 勾选Override console cycle buffer size(1024 KB)并修改
    禁用缓存区大小限制:修改bin目录下的启动配置文件idea.properties -> idea.cycle.buffer.size=disabled

    w. Tab键改为4个空格
    Editor -> Code Style -> Java -> 选中Tabs and Indents选项卡 -> 取消勾选Use tab character

    x. 设置当行代码120个宽度
    Editor -> Code Style -> Hard wrap at 120 columns 选中Wrap on typing

    y. 换行符使用Unix格式
    Editor -> Code Style -> Line separator: Unix and OS X(\n)

    z. 使用javac的方式编译代码
    Build,Execution,Deployment -> Compiler -> Java Compiler -> Use compiler:Javac

5. 快捷键
   alt + enter         万能纠错
   alt + r                执行
   alt + up             向上移动行
   alt + down        向下移动行
   alt + shift + c    收起所有方法
   alt + shift + m   抽取方法
   alt + shift + r     重构:修改变量名或方法名
   alt + shift + s     生成构造器/get/set/toString
   alt + shift + x     打开所有方法
   alt + shift + z     生成try...catch
   alt + 7                 查看一个类里面有那些方法
   alt + F8               debug时计算表达式

   ctrl + e               打开最近修改的文件
   ctrl + shift + e   最近修改的代码位置
   ctrl + o              查看类的结构
   ctrl + u              调试:查看表达式的值
   ctrl + w              关闭当前的tab
   ctrl + F12          查看一个类里面有那些方法
   ctrl + b              查看某个方法被那些地方调用

   ctrl + alt + /      提示方法参数类型
   ctrl + alt + f      添加到收藏
   ctrl + alt + down   向下复制一行
   ctrl + alt + F7       查看一个类里面定义的变量在那些地方被调用
   ctrl + alt + b        需要看一个类/方法的实现类/方法
   ctrl + alt + h        查看某个方法的调用链关系
   ctrl + alt + 左方向键  debug时跳回来
   ctrl + alt +v         快速抽取变量

   ctrl + shift + enter  向上开始新的一行
   ctrl + shift + h         查找方法在哪里被调用
   ctrl + shift + q         快速搜索类中的错误
   ctrl + shift + t          查看源码
   ctrl + shift + v         选择要粘贴的内容
   ctrl + shift + w        关闭所有的tab
   ctrl + shift + x         打开代码所在硬盘的文件夹
   ctrl + shift + y         大小写转换
   ctrl + shift + F9       重新编译
   ctrl + shift + alt + n 使用symbol来查找

   shift + enter     向下开始新的一行
   shift + shift      查找文件
   shift + F6         重命名

6. 代码模板
   psvm                  main方法
   sout/soutm/soutv      System.out.println()
   fori/itar             for循环
   iter                  foreach
   list.for/list.fori/list.forr
   ifn                   if(xxx == null)
   inn                   if(xxx != null)
   psf                   public static final
   prsf                  private static final
   psfi                  public static final int
   psfs                  public static final String

7. 版本控制
   Settings -> Version Control -> Git -> Path to Git executable: D:\Program\64\Git\bin\git.exe
   Settings -> Version Control -> GitHub -> Host: github.com 
                                            Auth Type: Password
                                            Login: changan25801@163.com
                                            Password: ******

8. Maven配置
File -> Other Settings -> Default Settings -> Build,Execution,Deployment -> Build Tools -> Maven -> 
Maven home directory: D:\Program\Green\64\apache-maven-3.5.2
User settings file: D:\Program\Green\64\apache-maven-3.5.2\conf\settings.xml
Local repository: D:\MavenRepository

File -> Other Settings -> Default Settings -> Build,Execution,Deployment -> Build Tools -> Maven -> Importing -> 勾选Import Maven projects automatically

9. 缓存和索引清理
File -> Invalidate Cache/Restart...

10. 插件
https://plugins.jetbrains.com/   Gsonformat
VisualVM Launcher
findbugs
Alibaba Java Coding Guidelines
Maven Helper
lombok:
IDEA:Settings->Build,Execution,Deployment->Compiler->Annotation Processors->springmvcdemo->选中Enable annotation processing
开启该项是为了让Lombok注解在编译阶段起到作用
Eclipse:Eclipse内置的编译器不是Oracle javac，而是eclipse自己实现的Eclipse Compiler for Java (ECJ).要让ECJ支持Lombok，需要在eclipse.ini配置文件中添加如下两项内容:
-Xbootclasspath/a:[lombok.jar所在路径]

11.自定义注释模板
File->Settings->Editor->File and Code Templates->Incudes->File Header下添加注释模板
/**
 *@className:${NAME}
 *@description: TODO
 *@author Barkley.Chang
 *@date ${YEAR}-${MONTH}-${DAY} ${HOUR}:${MINUTE}
 */

12.断点
断点四种类型：
行断点（Line Breakpoints）:最经常用的方式, 可以设置在任何可执行的代码行上
方法断点（Method Breakpoints）:在进入或退出指定的方法或其实现之一时挂起程序,允许您检查方法的进入/退出条件
字段断点（Field Watchpoints）:当指定的字段被读取或写入时,挂起程序。需要注意的是,默认只有写才会停下,想要让读取时也停下,需要右击断点,在Watch的Field access上打勾才行
异常断点（Exception Breakpoints）:当抛出Throwable或其子类时挂起程序 。可以在 Run — View Breakpoints 中的 Java Exception Breakpoints 里添加异常的具体类型。这样的话,程序中一旦发生了这种异常马上就会停下来

13.热部署
需要一个Facebook或Twitter的账号(最好Twitter)
进入这个网址：https://my.jrebel.com/，并登录
然后在Install and Acticate里可以得到你的永久激活码

利用破解激活插件:
a.安装JRebel for IntelliJ插件:File->Settings->Plugins->Browse repositories->搜索jrebel
b.打开激活插件ReverseProxy_windows_amd64.exe
c.重新打开idea,点击Rebel Debug 'Tomcat 9.0.10'
d.在Activate JRebel窗口:
    第一行输入:http://127.0.0.1:8888/578eec14-a3ee-4b77-8565-92777839f1ae
    生成GUID网站:https://www.guidgen.com
    第二行输入:changan25801@163.com
    选中"I agree with the terms & conditions of the License Agreement."
    点击"Activate JRebel"按钮,进行激活
e.激活成功后:File->Settings->JRebel->点击"Work offline"按钮
f.关闭ReverseProxy_windows_amd64.exe,激活完成
此时虽然安装好了JRebel并成功激活了，但是我们使用JRebel debug的时候，发现修改代码后，热部署不起作用。因为还需要设置两个地方
1).设置项目自动编译
File -> Settings -> Build,Execution,Deployment -> Compiler -> 勾选Build project automatically
2).设置 compiler.automake.allow.when.app.running
CTRL+ SHIFT + A或者help -> find action…打开:搜索registry
找到 compiler.automake.allow.when.app.running并勾选
g.项目中使用:
View -> Tool Windows -> JRebel -> 勾选第一个复选框

14.创建JavaEE项目
File -> New -> Project -> Java Enterprise -> Additional Libraries and Frameworks: 选中Web Application
在WEB-INF下新建lib文件夹,在添加jar包后在lib文件夹上右键-> Add as Library
File -> Project Structure -> Artifacts -> fix

15. svn不能同步代码问题修正
File -> Settings ->Subversion ->General -> Use command line client 选中
1.使用command line方式需要指定svn.exe的路径,例如:D:\tools\TortoiseSVN\bin\svn.exe
2.注意,安装TortoiseSVN时路径中不要带空格,例如:C:\Program Files\TortoiseSVN\bin\svn.exe就会报错
3.安装TortoiseSVN选择全部安装组件,否则可能没有svn.exe