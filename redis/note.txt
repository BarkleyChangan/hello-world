# redis安装
1. 安装gcc
yum install gcc -y
gcc -v
yum install tcl -y

2. 解压并安装redis
tar -zxvf redis-4.0.11.tar.gz
make distclean
make
make test
make install PREFIX=/usr/local/redis

3. 拷贝配置文件
cp redis.conf /usr/local/redis/bin/redis.conf
修改: daemonize yes

4. 启动redis
cd /usr/local/redis/bin
前台启动(关闭终端自动停止): ./redis-server redis.conf
后台启动:1. 修改redis.conf文件: daemonize yes
               2. ./redis-server & redis.conf
客户端连接: ./redis-cli -p 6379
ping

ps -ef | grep redis
lsof -i :6379

5. 关闭redis
./redis-cli -h 127.0.0.1 -p 6379 shutdown
exit

6. 开放端口和IP地址
修改redis.conf文件: bind 0.0.0.0

iptables -I INPUT -p tcp --dport 6379 -j ACCEPT
service iptables save
service iptables restart
service iptables status(查看开放端口)

# 五种数据类型
1. String 512M
2. Hash
3. List
4. Set
5. Zset

# redis命令
select 0 选择数据库
keys *   查看当前数据库所有的key
randomkey 随机的获取一个key
flushdb  清空当前库
flushall 清空所有库
dbsize   查看存储的数量
exist k1 是否存在
exists key key名 判断key是否存在
move k3 2 移动k3到2号数据库
expire key 为key设置过期时间(秒):expire k2 10
ttl key  查看还有多少秒过期-1表示永不过期 -2表示已过期
type key 查看key是什么类型
del key  删除
config get dir 获取启动路径
config get requirepass
save     备份rdb
bgsave   Redis会在后台异步进行快照操作
lastsave 获取最一次save的时间
rename name nickname 改变key的名字

SET key value [EX seconds] [PX milliseconds] [NX|XX]
新版的set命令增加了EX、PX、NX|XX参数选项,他们的含义如下:
EX seconds         设置键key的过期时间,单位时秒
PX milliseconds  设置键key的过期时间,单位时毫秒
NX                       只有键key不存在的时候才会设置key的值
XX                        只有键key存在的时候才会设置key的值

# 查看Redis内部正在做什么
INFO commandstats
执行CONFIG RESETSTAT命令就可以重置,这样你就可以得到一个全新的统计结果

事务:
discard 取消事务
exec    执行事务
multi   标记一个事务开始
unwatch 取消watch命令对所有key的监视
watch key1 监视一个或多个key,如果在事务执行之前这个key被其他命令所改动事务被打断

主从复制:
info replication
slaveof 127.0.0.1 6379
slaveof no one

# 统计
INFO commandstats
重置:CONFIG RESETSTAT

# 回收策略
建议使用 volatile-lru 策略——前提是你对key已经设置了超时
但如果你运行的是一些类似于 cache 的东西，并且没有对 key 设置超时机制，可以考虑使用 allkeys-lru 回收机制

# Try/Except
数据很重要请使用Try/Except

########## RDB持久化 ##########
自动触发
除了执行以上命令手动触发以外,Redis内部可以自动触发RDB持久化。自动触发的RDB持久化都是采用bgsave的方式,减少Redis进程的阻塞。那么在什么场景下会自动触发呢？
1. 在配置文件中设置了save的相关配置,如sava m n,它表示在m秒内数据被修改过n次时,自动触发bgsave操作
2. 当从节点做全量复制时,主节点会自动执行bgsave操作，并且把生成的RDB文件发送给从节点
3. 执行debug reload命令时,也会自动触发bgsave操作
4. 执行shutdown命令时,如果没有开启AOF持久化也会自动触发bgsave操作
########## RDB持久化 ##########

########## AOF持久化配置 ##########
# appendonly改为yes开启AOF
appendonly yes
# AOF文件的名字
appendfilename "appendonly.aof"
# AOF文件的写入方式
# everysec每个一秒将缓存区内容写入文件,默认开启的写入方式
appendfsync everysec
# 运行AOF重写时AOF文件大小的增长率的最小值
auto-aof-rewrite-percentage 100
# 运行AOF重写时文件大小的最小值
auto-aof-rewrite-min-size 64mb


# 触发文件重写
AOF持久化流程中的文件重写可以手动触发，也可以自动触发
手动触发: 使用bgrewriteaof命令
自动触发: 根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage配置确定自动触发的时机。auto-aof-rewrite-min-size表示运行AOF重写时文件大小的最小值，默认为64MB；auto-aof-rewrite-percentage表示当前AOF文件大小和上一次重写后AOF文件大小的比值的最小值，默认为100。只用前两者同时超过时才会自动触发文件重写
########## AOF持久化配置 ##########