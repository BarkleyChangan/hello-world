***************** 初始化配置 *****************
# 查看版本
git --version

# 升级
git update-git-for-windows

# 系统级配置(默认位置为C:\Program Files\Git\mingw64\etc\gitconfig)
git config --edit --system

# 用户级别配置:global为当前用户的全局配置文件(C:\Users\{你的用户名}\.gitconfig)
git config --edit --global

# 存储库级别配置
git config --edit

# 初次运行-git前的配置
git config --global user.name "John Doe"
git config --global user.email "johndoe@example.com"
配置完以后查看:git config --list
git config --global color.ui auto
           --local     # 只对某个仓库有效
           --global  # 对当前用户所有仓库有效
           --system # 对系统所有登录用户有效

# Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。
git config --global core.autocrlf true

# 如果你使用TFS作为Git服务器，那么还需要另外执行以下3个命令以便Git Credential Manager 可以正常工作
git config --global credential.helper manager
git config --global credential.modalprompt true
git config --global credential.{你的TFS服务器地址}.authority Basic

# 生成SSH
ssh-keygen -t rsa -C "johndoe@example.com"

# 测试与GitHub通信
ssh -T git@github.com

# 在现有目录中初始化仓库
git init
hooks 包含客户端或服务器的钩子脚本
info 包含一个全局性排除文件
logs 日志信息
objects 存储所有数据内容
refs 存储指向数据(分支)的提交对象指针
config 项目特有的配置选项
description 显示对仓库的描述信息
HEAD 指示目前被检出的分支
index 保存暂存区信息
***************** 初始化配置 *****************

***************** 获取 *****************
# 克隆现有的仓库
git clone https://github.com/libgit2/libgit2 mygit

# 获取远程的feature-D分支
git checkout -b feature-D origin/feature-D

# 获取最新的远程仓库分支
git pull origin feature-D
git pull origin srcBranch:destBranch
其中srcBranch表示的是远程分支,destBrach表示的是本地分支

# 从远程仓库抓取数据(此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。
	fetch命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。
	git fetch [remote-name]
    自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支
    git pull
	
# 把现有仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库
git clone --bare my_project my_project.git
***************** 获取 *****************

***************** 添加暂存区&提交 *****************
# 跟踪新文件
git add README
git add .
git add -u 		# 对已经跟踪的文件直接添加暂存区

# 提交更新
git commit
git commit -m "Story 182: Fix benchmarks for speed"

# 把所有已经跟踪过的文件暂存起来一并提交，从而跳过git add步骤
git commit -am 'added new benchmarks'

# 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令尝试重新提交。使用--amend选项的提交会与最后一次提交进行合并生成一个新的提交，之前的提交会被废弃掉。
git commit --amend

# 修改提交注释与作者
git commit --amend -m '修正信息'

# 添加远程仓库
git remote add origin https://github.com/paulboone/ticgit

# 推送到远程仓库git push [remote-name] [branch-name]
git push origin master
git push -u origin master -u参数可以在推送的同时,将origin仓库的master分支设置为本地仓库当前分支的上游upstream。添加了这个参数,将来运行git pull命令从远程仓库获取内容时,本地仓库的这个分支就可以直接从origin的master分支获取内容,省去了另外添加参数的麻烦

# 创建本地work分支的远程分支
git push [remote-name] [branch-name]
git push <remote> --force 强行推送当前分支到远程仓库，即使有冲突
git push <remote> --all   推送所有分支到远程仓库
git push origin work
                本地分支名：远程分支名
git push origin srcBranch:destBranch
其中srcBranch表示的是本地分支,destBranch表示的是远程分支

# 要把该远程分支的内容合并到当前分支
git merge origin/serverfix

# 放弃本次合并
git merge --abort

# 提交前的检查,会把可能多余白字符修正出来
git diff --check

# 将一个子目录设置为新的根目录
git filter-branch --subdirectory-filter trunk HEAD

# 将外部项目加为子模块
git submodule add git://github.com/chneukirchen/rack.git rack
git submodule init
git submodule update
***************** 添加暂存区&提交 *****************

***************** 修改&撤销&删除 *****************
# 移动文件&文件重命名
git mv README.md README

# 删除版本库中的文件
git rm PROJECTS.md

# 移除文件(如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。)
git rm -f PROJECTS.md

# 把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中
git rm --cached readme.txt

# 删除工作区和版本库中的文件，不能删除暂存区文件
rm <file>
与git rm不同的是，该指令不会将删除操作纳入暂存区。需要先将删除的test.txt纳入暂存区，再提交到版本库才能完成test.txt文件的删除

# 对删除的文件进行恢复
git checkout -- NewCreateFile

# 将暂存区修改恢复到工作区
git reset HEAD <file>
git restore --stage <file>

# 撤销工作区对文件的修改、新增和删除操作
git restore <file>
git checkout -- <file>

# 远程仓库的重命名
git remote rename pb paul

# 移除远程仓库
git remote rm paul
git remote add origin https://gitee.com/ahuntsun/gitTest.git

# 远程仓库的删除和重命名
git remote rename pb paul

# 修改原有的远程仓库URL
git remote set-url origin https://163.com

# 只改变提交点，暂存区和工作目录的内容都不改变
git reset —soft <commit>

# 改变提交点，同时改变暂存区的内容
git reset —mixed <commit>

# 暂存区、工作区的内容都会被修改到与提交点完全一致的状态
git reset —hard <commit>

# 让工作区回到上次提交时的状态
git reset --hard HEAD

# 回退
git reset --hard 8cab126

# 用一个新提交来消除一个历史提交所做的任何修改
git revert 15df9b6

# 更改历史
git rebase -i HEADE~2

# 重新提交
git commit --amend

# 从所有提交中删除一个文件
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
***************** 修改&撤销&删除 *****************

***************** 后悔药 *****************
# 工作区->工作区
git checkout -- <file>
git restore <file>

# 暂存区->工作区
git rm --cached <file>
git restore --stage <file> 必须是已提交过的文件
git reset HEAD <file>

# git reset
--mixed：为默认值，等同于git reset。作用为：将文件回退到工作区，此时会保留工作区中的文件，但会丢弃暂存区中的文件
--soft：作用为：将文件回退到暂存区，此时会保留工作区和暂存区中的文件
--hard：作用为：将文件回退到修改前，此时会丢弃工作区和暂存区中的文件
git reset --hard commit_id 返回指定的提交

# 回退方法汇总:版本回退主要有三大方式：reset、revert和checkout，各方式的比较如下
方法				效果				向前回退	向后回退	同步修改HEAD与分支指向
git reset --hard HEAD^		往前回退1次提交			能		否		是
git reset --hard HEAD^^		往前回退2次提交			能		否		是
git reset --hard HEAD~n		往前回退n次提交			能		否		是
git reset --hard <commit_id>	回退到指定commit id的提交	能		能		是
git revert HEAD			重做最新一次提交		能		否		是
git revert HEAD^		重做倒数第二次提交		能		否		是
git revert HEAD^^		重做倒数第三次提交		能		否		是
git revert HEAD~n		重做倒数第n+1次提交		能		否		是
git revert commit_id		重做指定commit_id的提交	能		能		是
git checkout commit_id		回退到指定commit id的提交	能		能		否
***************** 后悔药 *****************

***************** 日志 *****************
# 查看提交历史
git log
		选项				说明
		-p 					用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：git log -p -2;单词层面的对比：git log -p --word-diff
		--stat      		显示每次更新的文件修改统计信息。
		--shortstat			只显示 --stat 中最后的行数修改添加移除统计。
		--name-only			仅在提交信息后显示已修改的文件清单。
		--name-status		显示新增、修改、删除的文件清单。
		--abbrev-commit		仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
		--relative-date		使用较短的相对时间显示（比如，“2 weeks ago”）。
		--graph				显示 ASCII 图形表示的分支合并历史。
		--pretty			使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
		-(n)				仅显示最近的 n 条提交
		--since, --after	仅显示指定时间之后的提交。
		--until, --before	仅显示指定时间之前的提交。
		--author 			仅显示指定作者相关的提交。
		--committer 		仅显示指定提交者相关的提交。
		--grep 				仅显示含指定关键字的提交
		-S 					仅显示添加或移除了某个关键字的提交

# git可以为你的 SHA-1 值生成出简短且唯一的缩写
git log --pretty=oneline --abbrev-commit

# 查看项目分叉历史
git log --oneline --decorate --graph --all

# 简化版提交日志
git log --graph --abbrev-commit

# 一次性查看所有分支及其提交记录
git log --all --decorate --oneline --graph
设置个别名:git config --global alias.dog 'log --all --decorate --oneline --graph'

# 查看修改日志
git blame file_name

# 查看操作日志
git reflog
***************** 日志 *****************

***************** 储藏 *****************
# 储藏
git stash

# 查看现有的储藏
git stash list

# 重新应用储藏
git stash apply
git stash apply stash@{2}

# 移除储藏
git stash drop

# 重新应用储藏，同时立刻将其从堆栈中移走
git stash pop

# 重新应用被暂存的变更
git stash apply --index

# 从储藏中创建分支
git stash branch testchanges
***************** 储藏 *****************

***************** 分支 *****************
# 创建分支
git branch feature-A
git checkout -b feature-A

# 切换分支
git checkout master

# 合并分支
git merge --no-ff feature-A

# 查看分支
git branch

# 查看本地仓库和远程仓库分支关系
该指令作用为,将本地master分支相关联的远程分支设置为远程master分支,执行该指令后通过git branch -vv查看分支的关联情况,可见已顺利建立关联:
git branch --set-upstream-to=origin/远程分支的名字 本地分支的名字
git branch --set-upstream-to=origin/<branch> master
git branch -vv
git pull origin master --allow-unrelated-histories
git push origin master
建立本地master分支与远程master分支的联系,并进行推送:
git push --set-upstream origin master

# 重命名本地分支
git branch -m <oldName> <newName>

# 合并分支
git merge hofix

# 删除分支
git branch -d hotfix

# 强制删除分支
git branch -D hotfix

# 删除远程分支
git push origin :serverfix
git push origin --delete <分支名>

# 切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致
git checkout -b serverfix origin/serverfix
git checkout --track origin/serverfix  (1.6.2 以上版本的 Git)

# 将一个已存在的本地分支改成一个跟踪分支
git branch -u origin/master

# 查看远程跟踪分支
git branch -vv

# 选择一个 commit，合并进当前分支
git cherry-pick <commit>

# 删除远程分支
git push origin --delete serverfix

# 列出仍在远程跟踪但是已被删除的无用分支
git remote prune origin --dry-run
清除上面命令列出的远程跟踪
git remote prune origin

本地分支怎么去跟踪远程跟踪分支:
1.当克隆的时候会自动生成一个master本地分支(已经跟踪了对应的远程跟踪分支)
2.在新建其他分支时,可以指定想要跟踪的远程跟踪分支
git checkout -b 本地分支名 远程跟踪分支名
git checkout --track 远程跟踪分支名

git checkout --track origin/zdy
3.将一个已经存在的本地分支,改成一个跟踪分支
git branch -u 远程跟踪分支名

git branch -u origin/zdy
***************** 分支 *****************

***************** 变基 *****************
# 分支的变基 注意: 一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行变基操作。
git rebase master
git rebase [主分支] [特性分支]
git rebase --onto master server client
git pull --rebase 解决问题

# 修改多个提交说明(四次提交之前，即你想修改的提交的父提交)
git rebase -i HEAD~3
git rebase --continue
***************** 变基 *****************

***************** 查看状态信息 *****************
# 查看配置信息
git config --list

# 查看某个环境变量的值
git config user.name

# 查看所设置的别名
git config -l

# 获取帮助
git help config

# 检查当前文件状态
git status
git status -s
git status --short
		
# 使用图形化工具查阅提交历史
gitk
git gui

# 查看已暂存和未暂存的更新(请注意，单单 git diff 不过是显示还没有暂存起来的改动，而不是这次工作和上次提交之间的差异。)
git diff

# 查看已经暂存起来的文件和上次提交时的快照之间的差异
git diff --cached
git diff --staged
git diff HEAD

指令			作用							原始文件		目标文件
diff <file1> <file2>	比较两个本地文件						本地文件/版本库	本地文件/版本库
git diff			比较暂存区和工作区中的同一文件				暂存区		工作区
git diff commit_id	比较指定commit id提交上的A文件和工作区中的A文件		版本库		工作区
git diff HEAD		比较最新提交上的A文件和工作区中的A文件			版本库		工作区
git diff --cached commit_id	比较指定提交上的A文件和暂存区中的A文件		版本库		暂存区
git diff --cached		比较最新提交上的A文件和暂存区中的A文件			版本库		暂存区

# 通过图形化的方式显示差异
git difftool

# 查看你的系统支持哪些 Git Diff 插件
git difftool --tool-help

# 查看远程仓库
git remote 只显示远程仓库地址名
git remote -v 显示远程仓库地址名和对应URL
git remote show origin 显示详细信息

# 显示本地仓库和远程仓库的信息
git branch -a

# 调用图形界面的工具解决冲突(然后根据提示输入opendiff)
git mergetool

# 查看各个分支最后一个提交对象的信息
git branch -v

# 查看已经（或尚未）与当前分支合并的分支
git branch --merged
git branch --no-merged

# 新建一个分支并且使指向对应的提交对象
git branch name COMMITHASH

# 当前分支同其他分支合并时的完整内容差异
git diff master

# 把 ... 加在原始分支（拥有共同祖先）和当前分支之间
git diff master...contrib

# 查看仓库中 HEAD 在五次前的值
git show HEAD@{5}

git show master@{yesterday}
# 查看上一次提交
git show HEAD^

# 所有可从experiment分支中获得而不能从master分支中获得的提交
git log master..experiment

# 文件标注
git blame -L 12,22 test.txt

# 代码块的原始出处
git blame -C test.txt

# 二分查找
git bisect start
git bisect bad
git bisect good v1.0
git bisect reset

# 显示每一个文件中每一行代码的作者
git blame [file_name]
***************** 查看状态信息 *****************

***************** 标签 *****************
# 标签包括“轻量标签”（lightweight）和 “辅助标签”（annotated）
# 轻量标签之所以轻量是因为它只是一个特定commit的引用。而“附注标签”是存储在git数据库中的一个完整对象。
# 列出标签
git tag
git tag -l 'v1.8.5*'

# 创建轻量级标签
git tag v1.4-lw
git tag -a 版本号 -m 'tag 信息'
git tag -a vx.x.x -m 'message' commit-hash

# 创建含附注的标签
git tag -a v1.4 -m 'my version 1.4'
git tag -a v1.2 9fceb02

# 查看标签信息以及提交信息
git show v1.4

# 轻量标签:创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字
git tag v1.4

# 签署标签
git tag -s v1.5 -m 'my signed 1.5 tag'

# 给某一个历史提交打标签
git tag -a v1.2 9fceb02

# 向服务器推送标签
git push origin v1.2

# 将本地创建的所有 tag推送到远端origin
git push origin --tags

# 在特定的标签上创建一个新分支
git checkout -b version2 v2.0

# 验证标签
git tag -v v1.4.2.1

# 分享标签
git push origin [tagname]

# 一次推送所有本地新增的标签上去
git push origin --tags

# 我们检出分支时，在分支的名字后方添加上相应的版本号，即可在该 tag 号所对应的分支上进行checkout
git checkout -b MyTagBranch v1.1.1
***************** 标签 *****************

***************** 忽略文件 *****************
# .gitignore的文件,列出要忽略的文件模式
	https://github.com/github/gitignore
	http://gitignore.io/
	#:井号（#）用来添加注释用的，比如 "#注释"
	build/* : 星号（*）是通配符，build/*则是要说明要忽略 build 文件夹下的所有内容。
    *.pbxuser : 表示要忽略后缀名为.pbxuser的文件。
    !default.pbxuser : 感叹号（!）是取反的意思，*.pbxuser 表示忽略所有后缀名为.pbxuser的文件，如果加上!default.pbxuser则表示，除了default.pbxuse忽略其它后缀名为pbxuse的文件
	*.[oa] 忽略所有以.o或.a结尾的文件
	*~     忽略所有以波浪符~结尾的文件文件
	1. 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
	2. 可以使用标准的 glob 模式匹配。
	3. 匹配模式最后跟反斜杠（/）说明要忽略的是目录。
	4. 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
***************** 忽略文件 *****************

***************** 提交说明格式模版 *****************
#本次更新的简要描述（50 个字符以内）

#如果必要，此处展开详尽阐述。段落宽度限定在 72 个字符以内。
#某些情况下，第一行的简要描述将用作邮件标题，其余部分作为邮件正文。
#其间的空行是必要的，以区分两者（当然没有正文另当别论）。
#如果并在一起，rebase 这样的工具就可能会迷惑。

#另起空行后，再进一步补充其他说明。

# - 可以使用这样的条目列举式。

# - 一般以单个空格紧跟短划线或者星号作为每项条目的起始符。每个条目间用一空行隔开。
   不过这里按自己项目的约定，可以略作变化。
***************** 提交说明格式模版 *****************

***************** Git底层命令 *****************
# Git对象
git hash-object -w fileName 生成一个hash值,val压缩后的文件内容,键值对存储到.git/objects
-w: 是否存储数据对象,若不指定则只是返回hash

git cat-file -p 560a3d89bf36ea10794402f6664740c284d4ae3b 根据键值查看数据
git cat-file -t 560a3d89bf36ea10794402f6664740c284d4ae3b 查看文件类型


# tree对象
git update-index --add --cacheinfo 100644 hash test.txt 往暂存区添加一条记录(让git对象对应上文件名)
git write-tree 生成树对象

# Commit对象
echo "first commit" | git commit-tree treehash 生成一个提交对象,存储到.git/objects

# 查看暂存区
git ls-files -s

# 操作基本流程说明
git add .
    git hash-object -w 文件名
    git update-index ...
git commit -m "注释内容"
    git write-tree
    git commit-tree
***************** Git底层命令 *****************