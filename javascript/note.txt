# 在线工具ES6 TO ES5
https://babeljs.io/repl/#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=Q&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.9.6&externalPlugins=

# window.onerror
1.无法捕获语法错误
2.只有在返回true的时候,异常才不会向上抛出（浏览器接收后报红）,否则即使是知道异常的发生控制台还是会显示Uncaught Error:xxxxx
3.最好写在所有JS脚本的前面,否则有可能捕获不到错误

// message：错误信息（字符串）。
// source：发生错误的脚本URL（字符串）
// lineno：发生错误的行号（数字）
// colno：发生错误的列号（数字）
// error：Error对象（对象）
window.onerror = function(message, source, lineno, colno, error) {
    console.log('捕获到异常：',{message, source, lineno, colno, error});
};
// iframe异常
window.frames[0].onerror = function (message, source, lineno, colno, error) {
    console.log('捕获到 iframe 异常：', {message, source, lineno, colno, error});
};

# window.addEventListener
由于网络请求异常不会事件冒泡,因此必须在捕获阶段将其捕捉到才行,但是这种方式虽然可以捕捉到网络请求的异常,但是无法判断HTTP的状态是404还是其他比如500等
window.addEventListener("error", (error)=>{
    console.log('addEventListener捕获到异常：', error);
}, true);
// 全局捕获Promise的异常
window.addEventListener("unhandledrejection", (error)=>{
    console.log('addEventListener捕获到异常：', error);
}, true);

# 崩溃和卡顿
window.addEventListener('load', function () {
    sessionStorage.setItem('good_exit', 'pending');
    setInterval(function () {
        sessionStorage.setItem('time_before_crash', new Date().toString());
    }, 1000);
});

window.addEventListener('beforeunload', function () {
    sessionStorage.setItem('good_exit', 'true');
});

if(sessionStorage.getItem('good_exit') && sessionStorage.getItem('good_exit') !== 'true') {
    /*
        insert crash logging code here
    */
    alert('Hey, welcome back from your crash, looks like you crashed on: ' + sessionStorage.getItem('time_before_crash'));
}

# 获取元素当前样式(以下两种方式都为只读方式)
elem.currentStyle.width                          // IE8以下,没有设置width的情况下获取到的是auto
window.getComputedStyle(elem,null); // 非IE,没有设置width的情况下获取到的具体的px

# 元素样式相关属性
clientWidth(只读)=width+padding
offsetWidth(只读)=width+padding+border
offsetParent 获取开启了定位的父元素,如果没有则返回body
offsetLeft     当前元素相对于定位元素的水平偏移量
scrollHeight 获取元素整个滚动区域的高度
scrollTop      垂直滚动条滚动距离
var st = document.body.scrollTop || document.documentElement.scrollTop;
scrollHeight-scrollTop=clientHeight 当满足这个等式时,垂直滚动条滚动到底

event.clientX|event.clientY 获取鼠标相对于当前视口的坐标
event.pageX|event.pageY   获取鼠标相对于当前页面的坐标(IE8不兼容)

# 阻止事件冒泡和默认行为
Chrome: e.stopPropagation();
               e.target
IE:           e.cancelBubble=true;
               e.srcElement

Chrome: e.preventDefault();
IE:            e.returnValue=false;
javascript的return false只会阻止默认行为，而是用jQuery的话则既阻止默认行为又防止对象冒泡
btn.onclick = function (e) {
    var e = e || window.event                  //event兼容写法
    var target = e.target || e.srcElement //target兼容写法
}

# requestAnimationFrame实现动画
IE:10以上,Firefox:4以上,Chrome:10以上,Safari:6以上,Opera:15以上
特点:
1.由浏览器来决定回调函数的执行时机，即紧跟浏览器的刷新步调。如果屏幕刷新频率是60Hz，那么回调函数每16.7ms被执行一次，如果屏幕刷新频率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象，自然不会导致动画的卡顿
2.CPU节能:使用setTimeout实现的动画，当页面被隐藏（隐藏的<iframe>）或最小化（后台标签页）时，setTimeout仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，而且还浪费 CPU 资源和电池寿命。而requestAnimationFrame则完全不同，当页面处于未激活的状态下，该页面的屏幕绘制任务也会被浏览器暂停，因此跟着浏览器步伐走的requestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了 CPU 开销，提升性能和电池寿命
3.函数节流：在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用requestAnimationFrame可保证每个绘制间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销。一个绘制间隔内函数执行多次时无意义，因为显示器（60Hz）每16.7ms 绘制一次，多次执行并不会在屏幕上体现出来
// DEMO:
function moveTo(dom, to) {
    dom.scrollLeft += 1;
    if(dom.scrollLeft <= to) {
        window.requestAnimationFrame(() => {
                moveTo(element, to)
        });
    }
}


####################### prototype #######################
1. 函数的显示原型指向的对象:默认是空Object对象{}(但Object不满足)
Fn.prototype instanceof Object           true
Object.prototype instanceof Object    false
Function.prototype instanceof Object true
2. 所有函数都是Function的实例(包括Function)
Function.__proto__ === Function.prototype true
3. Object的原型对象是原型链的尽头 
Object.prototype.__proto__
4. 实例对象的隐式原型属性指向构造函数的显式原型属性
####################### prototype #######################

####################### 组合式继承 #######################
function Person(name,age){
    this.name = name;
    this.age = age;
}
function Student(name,age,price){
    Person.call(this,name,age);
    this.price = price;
}
Student.prototype = new Person();
Student.prototype.constructor = Student;
var s = new Student("Tom",20,14000);
####################### 组合式继承 #######################

####################### console #######################
一、显示信息的命令
console.log('hello');
console.info('信息');
console.error('错误');
console.warn('警告');

二：占位符
console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）
console.log("%d年%d月%d日",2011,3,26)

三、信息分组
console.group("第一组信息");
console.log("第一组第一条:我的博客(http://www.ido321.com)");
console.log("第一组第二条:CSDN(http://blog.csdn.net/u011043843)");
console.groupEnd();
console.group("第二组信息");
console.log("第二组第一条");
console.log("第二组第二条:欢迎你加入");
console.groupEnd(); 

四、查看对象的信息
console.dir(info);

五、显示某个节点的内容
console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码

六、判断变量是否是真
console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常

七、追踪函数的调用轨迹。
console.trace()用来追踪函数的调用轨迹。
/*函数是如何被调用的，在其中加入console.trace()方法就可以了*/
function add(a,b){         
    console.trace();
    return a+b;
}
var x = add3(1,1);
function add3(a,b){return add2(a,b);}
function add2(a,b){return add1(a,b);}
function add1(a,b){return add(a,b);}

八、计时功能
console.time("控制台计时器一");
for(var i=0;i<1000;i++){
    for(var j=0;j<1000;j++){}
}
console.timeEnd("控制台计时器一");

九、console.profile()的性能分析
性能分析（Profiler）就是分析程序各个部分的运行时间，找出瓶颈所在
function All(){
    alert(11);
　　for(var i=0;i<10;i++){
        funcA(1000);
    }
　　funcB(10000);
}
function funcA(count){
    for(var i=0;i<count;i++){}
}
function funcB(count){
    for(var i=0;i<count;i++){}
}
console.profile('性能分析器');
All();
onsole.profileEnd();
####################### console #######################

####################### 宏队列,微队列 #######################
微队列:promise回调,mutation回调
宏队列:dom事件回调,ajax回调,定时器回调

####################### 宏队列,微队列 #######################

####################### 浏览器兼容处理 #######################
# 滚动高度
var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;

# 日期时间
new Date("2020-06-29".replace(/-/g, "/"));

# IE条件注释
<!--[if !IE]>除IE外都可识别<![endif]-->
<!--[if IE]>所有的IE可识别<![endif]-->
<!--[if IE 6]>仅IE6可识别<![endif]-->
<!--[if lt IE 6]>IE6以及IE6以下版本可识别<![endif]-->
<!--[if gte IE 6]>IE6以及IE6以上版本可识别<![endif]-->
<!--[if IE 7]>仅IE7可识别<![endif]-->
<!--[if lt IE 7]>IE7以及IE7以下版本可识别<![endif]-->
<!--[if gte IE 7]>IE7以及IE7以上版本可识别<![endif]-->
<!--[if IE 8]>仅IE8可识别<![endif]-->
<!--[if IE 9]>仅IE9可识别<![endif]-->

<!-- 
    ! NOT运算符
    lt 小于运算符
    lte 小于或等于运算符
    gt 大于运算符
    gte 大于或等于运算符
    & AND运算符
    | OR运算符
    () 子表达式运算符 用于与布尔运算符创建更复杂的表达式
-->

# 事件
var handler = {}
 //绑定事件
 handler.on = function(target, type, handler) {
 	if(target.addEventListener) {
 		target.addEventListener(type, handler, false);
 	} else {
 		target.attachEvent("on" + type,
 			function(event) {
 				return handler.call(target, event);
 		    }, false);
 	}
 };
 //取消事件监听
 handler.remove = function(target, type, handler) {
 	if(target.removeEventListener) {
 		target.removeEventListener(type, handler);
 	} else {
 		target.detachEvent("on" + type,
 	    function(event) {
 			return handler.call(target, event);
 		}, true);
     }
 };
handler.preventDefault = function(event) {
    event = event || window.event;
    if (event.preventDefault) {
        event.preventDefault();
    } else {
        event.returnValue = false;
    }
}
handler.stopPropagation = function(event) {
    event = event || window.event;
    if (event.stopPropagation) {
        event.stopPropagation();
    } else {
        event.cancelBubble = false;
    }
}
####################### 浏览器兼容处理 #######################