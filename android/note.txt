1. Activity与Fragment生命周期
    启动:
      FragmentOne.onAttach
      FragmentOne.onCreate
      FragmentOne.onCreateView
      MainActivity.onCreate
      FragmentOne.onActivityCreate
      FragmentOne.onStart
      MainActivity.onStart
      MainActivity.onResume
      FragmentOne.onResume
    Home键返回:
      FragmentOne.onPause
      MainActivity.onPause
      FragmentOne.onStop
      MainActivity.onStopped
    重新进入:
      MainActivity.onRestart
      FragmentOne.onStart
      MainActivity.onStart
      MainActivity.onResume
      FragmentOne.onResume
    退出:
      FragmentOne.onPause
      MainActivity.onPause
      FragmentOne.onStop
      MainActivity.onStopped
      FragmentOne.onDestroyView
      FragmentOne.onDestroy
      FragmentOne.onDetach
      MainActivity onDestory

2. 检查权限
/**
 - 检查某个权限。
 *
 - @param act
 - @param permissions
 - @param requestCode
 - @return true: 已启用该权限;false: 未启动该权限
 */
public static boolean checkPermission(Activity act, String[] permissions, int requestCode) {
    boolean result = true;

    // 只对Android 6.0及以上系统进行校验
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        int check = PackageManager.PERMISSION_GRANTED;

        for (String permission : permissions) {
            // 检查当前App是否开启了名称为permission的权限
            check = ContextCompat.checkSelfPermission(act, permission);

            if (check != PackageManager.PERMISSION_GRANTED) {
                break;
            }
        }

        if (check != PackageManager.PERMISSION_GRANTED) {
            // 未开启该权限,则请求系统弹窗,好让用户选择是否立即开启权限
            ActivityCompat.requestPermissions(act, permissions, requestCode);
            result = false;
        }
    }

    return result;
}

@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    int mRequestCode = 0;
    // 通过requestCode区分不同的请求
    if (requestCode == mRequestCode) {
        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            // 已授权,则进行后续的正常逻辑处理
        } else {
            // 未授权,则提示用户可能导致的问题
        }

    }
}